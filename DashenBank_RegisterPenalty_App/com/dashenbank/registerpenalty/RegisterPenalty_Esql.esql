



BROKER SCHEMA com.dashenbank.registerpenalty
PATH com.dashenbank.genericfunctions;
--DECLARE ns NAMESPACE 'https://www.fintech-group.com/services/Finpay';
--DECLARE soapenv NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
--DECLARE esb NAMESPACE 'http://www.dashenbank.org/ESB_RegisterPenaltyService/';

DECLARE rc BOOLEAN;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER;
DECLARE LOG4J_ERROR_MSG EXTERNAL CHARACTER;
DECLARE BACKEND_URL EXTERNAL CHARACTER;
DECLARE LOGGER_NAME EXTERNAL CHARACTER;
DECLARE LOG_TYPE EXTERNAL CHARACTER;
CREATE COMPUTE MODULE RequestToBackend

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = TRUE) THEN
			CALL request_from_channnel();
		ELSE
			SET OutputRoot.SOAP.Body.Log.Message = LOG4J_ERROR_MSG;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE request_from_channnel() BEGIN
		DECLARE msgId CHARACTER InputRoot.SOAP.Body.*:RegisterPenalty.*:providerID;
		SET Environment.id = msgId;
		SET Environment.Variables.Encoding = InputRoot.Properties.Encoding;
		SET Environment.Variables.CodedCharSetId = InputRoot.Properties.CodedCharSetId;
		SET Environment.domainDataRef = InputRoot.SOAP;
		SET Environment.RequestIdentifier = InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier;

		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		---------------------- Request Logging -------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(msgId,Environment.reqPayload,'CHANNEL_REQ',ApplicationLabel,OutRef);

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ CHANNEL_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'CHANNEL_REQ data is: '||Environment.reqPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -----------------------------------------------------------------------') INTO rc;
		----------------- Generating request to flexcube ----------------
		DECLARE inputBodyref REFERENCE TO InputRoot.SOAP.Body.*:RegisterPenalty;
		DECLARE inBodyref REFERENCE TO InputRoot.SOAP.Body.*:RegisterPenalty.*:RegisterPenaltyRequest;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outputbodyRef REFERENCE TO OutputRoot.SOAP;

		SET outputbodyRef.Body.*:RegisterPenalty.*:providerID = inputBodyref.*:providerID;
		SET outputbodyRef.Body.*:RegisterPenalty.*:appcode = inputBodyref.*:appcode;
		SET outputbodyRef.Body.*:RegisterPenalty.*:apppassphrase = inputBodyref.*:apppassphrase;
		SET outputbodyRef.Body.*:RegisterPenalty.*:token = inputBodyref.*:token;
		SET outputbodyRef.Body.*:RegisterPenalty.*:licenseNumber = inputBodyref.*:licenseNumber;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:ViolationDate = inBodyref.*:ViolationDate;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:ViolationDate = inBodyref.*:ViolationDate;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:DateAccused = inBodyref.*:DateAccused;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:TicketNo = inBodyref.*:TicketNo;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:PlateRegion = inBodyref.*:PlateRegion;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:NewPlateCode = inBodyref.*:NewPlateCode;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:NewPlateNo = inBodyref.*:NewPlateNo;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:OffenceId = inBodyref.*:OffenceId;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:ViolationGrade = inBodyref.*:ViolationGrade;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:UserID = inBodyref.*:UserID;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:Parent_guid = inBodyref.*:Parent_guid;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:Event_date = inBodyref.*:Event_date;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:Location = inBodyref.*:Location;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:ActionTaken = inBodyref.*:ActionTaken;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:Longitude = inBodyref.*:Longitude;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:Latitude = inBodyref.*:Latitude;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:LocationName = inBodyref.*:LocationName;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:Telephone = inBodyref.*:Telephone;
		SET outputbodyRef.Body.*:RegisterPenalty.*:RegisterPenaltyRequest.*:Amount = inBodyref.*:Amount;
		SET Environment.outputData = OutputRoot.SOAP;
		---------------------- Response Logging -------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE outRefData REFERENCE TO OutputRoot.XMLNSC;
		MOVE domainDataRef TO OutputRoot.SOAP;
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		CALL PayloadLogging(msgId,Environment.resPayload,'FLEXCUBE_REQ',ApplicationLabel,outRefData);

		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.SOAP = Environment.outputData;

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ FLEXCUBE_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'FLEXCUBE_REQ data is: '||Environment.resPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -------------------------------------------------------------------------') INTO rc;

		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = BACKEND_URL;

	END;
END MODULE;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE ResponseToChannel

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL response_from_flexcube();
		RETURN TRUE;
	END;

	CREATE PROCEDURE response_from_flexcube() BEGIN
		SET Environment.domainDataRef = InputRoot.SOAP;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		---------------------- Request Logging -------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(Environment.id,Environment.reqPayload,'FLEXCUBE_RES',ApplicationLabel,OutRef);

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------- FLEXCUBE_RESP -------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'FLEXCUBE_RESP data is: '||Environment.reqPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ----------------------------------------------------------------------') INTO rc;
		--------------- generating response to channel ---------------
		DECLARE inputBodyref REFERENCE TO InputRoot.SOAP.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse;
		DECLARE inBodyref REFERENCE TO InputRoot.SOAP.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outputbodyRef REFERENCE TO OutputRoot.SOAP;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:IsSuspended = inBodyref.*:IsSuspended;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:OffensePoint = inBodyref.*:OffensePoint;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:OffenseAmount = inBodyref.*:OffenseAmount;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:PointPenaltyAmount = inBodyref.*:PointPenaltyAmount;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:LatePaymentPenaltyAmount = inBodyref.*:LatePaymentPenaltyAmount;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:DelayPoints = inBodyref.*:DelayPoints;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:TotalPoints = inBodyref.*:TotalPoints;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:PaymentAmount = inBodyref.*:PaymentAmount;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:IsVoid = inBodyref.*:IsVoid;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:IsPaid = inBodyref.*:IsPaid;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:SuspensionDuration = inBodyref.*:SuspensionDuration;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:SuspensionMonths = inBodyref.*:SuspensionMonths;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:PaymentOrderNo = inBodyref.*:PaymentOrderNo;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:PaymentStatus = inBodyref.*:PaymentStatus;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:DriverID = inBodyref.*:DriverID;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:ErrorCode = inBodyref.*:ErrorCode;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:UtilAPIRegisterPenaltyResponse.*:ErrorMessage = inBodyref.*:ErrorMessage;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:Successful = inputBodyref.*:Successful;
		SET outputbodyRef.Body.*:RegisterPenaltyResponse.*:RegisterPenaltyResult.*:RegisterPenaltyResponse.*:Remarks = inputBodyref.*:Remarks;
		SET Environment.outputData = OutputRoot.SOAP;
		----------------------Response Logging-------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE outputRef REFERENCE TO OutputRoot.XMLNSC;
		MOVE domainDataRef TO OutputRoot.SOAP;
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		CALL PayloadLogging(Environment.id,Environment.resPayload,'CHANNEL_RES',ApplicationLabel,outputRef);

		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.HTTPResponseHeader = InputRoot.HTTPResponseHeader;
		SET OutputRoot.SOAP = Environment.outputData;

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -------- CHANNEL_RESP -------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'CHANNEL_RESP data is: '||Environment.resPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'**********************************************************************') INTO rc;
	END;
END MODULE;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE BuildExceptionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildExceptionResponse();
		RETURN TRUE;
	END;
	CREATE PROCEDURE BuildExceptionResponse() BEGIN
		CALL writeToLogFile(MessageFlowLabel, LOGGER_NAME,LOG_TYPE,'..............Error Logging Started...........') INTO rc;
		--DECLARE inRef REFERENCE TO InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment;
		DECLARE outRefer,outRef REFERENCE TO OutputRoot;
		--DECLARE encodeID INTEGER InputRoot.Properties.Encoding;
		--DECLARE ccsID INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputBody;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE excpPayload CHARACTER getPayLoad(domainName,domainDataRef,Environment.Variables.Encoding,Environment.Variables.CodedCharSetId);
		CREATE LASTCHILD OF Environment AS envRef DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Envelope';
		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Body';
		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'esb' NAME ApplicationLabel;
		CALL BuildExceptionDetails(excpRef,envRef,ApplicationLabel);
		SET Environment.Variables.UserDefinedException = Environment.XMLNSC;
		MOVE domainDataRef TO Environment.XMLNSC;
		SET domainName = FIELDNAME(domainDataRef);
		DECLARE resPayload CHAR getPayLoad(domainName,domainDataRef,Environment.Variables.Encoding,Environment.Variables.CodedCharSetId);
		CALL writeToLogFile(MessageFlowLabel, LOGGER_NAME,LOG_TYPE,'Application Built Exception:'||resPayload) INTO rc;
		------------Error Logging in DB----------
		--CALL ConstructErrorDBLog(CURRENT_TIMESTAMP,CREATED_BY,envRef.ErrorType,MessageFlowLabel,ApplicationLabel,ExecutionGroupLabel,
		---excpPayload,Environment.REQUEST_PAYLOAD,excpRef.excpNumber,envRef.ErrorCode,outRef);
		-------------------------------------------
		SET OutputRoot.XMLNSC.ExceptionDetails.Msg_Id = Environment.id;
		SET OutputRoot.XMLNSC.ExceptionDetails.ExceptionType = InputRoot.XMLNSC.ExceptionDetails.excpType;
		SET OutputRoot.XMLNSC.ExceptionDetails.ExceptionNumber = InputRoot.XMLNSC.ExceptionDetails.excpNumber;
		SET OutputRoot.XMLNSC.ExceptionDetails.ExceptionLable = InputRoot.XMLNSC.ExceptionDetails.excpLable;
		SET OutputRoot.XMLNSC.ExceptionDetails.ExceptionDescription = InputRoot.XMLNSC.ExceptionDetails.excpText;
		SET OutputRoot.XMLNSC.ExceptionDetails.ActualExceptionText = InputRoot.XMLNSC.ExceptionDetails.actualExcpText;
		--SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = Environment.Variables.RequestIdentifier;
		CALL writeToLogFile(MessageFlowLabel, LOGGER_NAME,LOG_TYPE,'..............End of Error Logging ...........') INTO rc;

	END;
END MODULE;