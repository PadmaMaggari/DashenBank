


BROKER SCHEMA com.dashenbank.fetchpenalty
PATH com.dashenbank.genericfunctions;
DECLARE LOG4J_CONFIG_PATH, LOG4J_ERROR_MSG, BACKEND_URL, LOGGER_NAME, LOG_TYPE EXTERNAL CHARACTER;
--------Global Variables----------
DECLARE rc BOOLEAN TRUE;

CREATE COMPUTE MODULE RequestToBackend

	CREATE FUNCTION Main() RETURNS BOOLEAN

	BEGIN
		CALL initLog4j(LOG4J_CONFIG_PATH) INTO rc;
		IF ( rc = TRUE ) THEN
			CALL RequestToBackend();
		ELSE
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_ERROR_MSG;
		END IF;

		RETURN TRUE;
	END;
	CREATE PROCEDURE RequestToBackend( )
	BEGIN
		SET Environment.domainDataRef = InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment.Variables;
		CREATE LASTCHILD OF Environment AS envRef NAME 'Variables';

		SET Environment.domainDataRef = InputRoot.SOAP;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		SET envRef.Encoding = encodeRef;
		SET envRef.CodedCharSetId = ccidRef;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);

		SET envRef.RequestIdentifier = InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier;
		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);

		DECLARE inRef REFERENCE TO InputRoot.SOAP.*:Body.*:FetchPenaltyList;
		SET envRef.id = inRef.*:providerID;
		----------------------------------------------------
		----------------------Request Logging-------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(envRef.id,Environment.reqPayload,'CHANNEL_REQ',MessageFlowLabel,OutRef);
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ CHANNEL_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'Request data is: '||Environment.reqPayload) INTO rc;
		----------------------------------------------------
		-------------Business Logic-------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outputbodyRef REFERENCE TO OutputRoot.SOAP;

		SET outputbodyRef.*:Body.*:FetchPenaltyList.*:providerID= inRef.*:providerID;
		SET outputbodyRef.*:Body.*:FetchPenaltyList.*:appcode= inRef.*:appcode;
		SET outputbodyRef.*:Body.*:FetchPenaltyList.*:apppassphrase= inRef.*:apppassphrase;
		SET outputbodyRef.*:Body.*:FetchPenaltyList.*:token= inRef.*:token;
		SET outputbodyRef.*:Body.*:FetchPenaltyList.*:licenseNumber= inRef.*:licenseNumber;
		SET outputbodyRef.*:Body.*:FetchPenaltyList.*:dtFrom= inRef.*:dtFrom;
		SET outputbodyRef.*:Body.*:FetchPenaltyList.*:dtTo= inRef.*:dtTo;
		SET outputbodyRef.*:Body.*:FetchPenaltyList.*:paymentstatus= inRef.*:paymentstatus;

		SET Environment.outputData = OutputRoot.SOAP;
		----------------------------------------------------
		----------------------Response Logging-------------------------
		MOVE domainDataRef TO OutputRoot.SOAP;
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		MOVE OutRef TO OutputRoot.XMLNSC;
		CALL PayloadLogging(envRef.id,Environment.resPayload,'BACKEND_REQ',MessageFlowLabel,OutRef);

		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.SOAP = Environment.outputData;

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ BACKEND_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'Request data is: '||Environment.resPayload) INTO rc;

		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = BACKEND_URL;
	END;

END MODULE;
-------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE COMPUTE MODULE ResponseToFrontend

	CREATE FUNCTION Main () RETURNS BOOLEAN
	BEGIN
		CALL ResponseToChannel();
	END;

	CREATE PROCEDURE ResponseToChannel( )
	BEGIN
		SET Environment.domainDataRef = InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment.Variables;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);

		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		----------------------------------------------------
		----------------------Request Logging-------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(envRef.id,Environment.reqPayload,'BACKEND_RES',MessageFlowLabel,OutRef);
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ BACKEND_RES ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'Response data is: '||Environment.reqPayload) INTO rc;
		----------------------------------------------------
		-------------Business Logic-------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE OutputBodyRef REFERENCE TO OutputRoot.SOAP;
		DECLARE iRef REFERENCE TO InputRoot.SOAP.*:Body.*:FetchPenaltyListResponse.*:FetchPenaltyListResult.*:FetchPenaltyListResponse.*:UtilAPIFetchPenaltyListResponse.*:UtilAPIFetchPenaltyListResponse;
		DECLARE inputdataRef REFERENCE TO InputRoot.SOAP.*:Body.*:FetchPenaltyListResponse.*:FetchPenaltyListResult.*;
		DECLARE j INTEGER CARDINALITY(InputRoot.SOAP.*:Body.*:FetchPenaltyListResponse.*:FetchPenaltyListResult.*:FetchPenaltyListResponse.*:UtilAPIFetchPenaltyListResponse.*:UtilAPIFetchPenaltyListResponse[]);
		DECLARE I INTEGER 1;
		WHILE I<=j DO
			SET OutputBodyRef.*:Body.*:FetchPenaltyListResponse.*:FetchPenaltyListResult.*:FetchPenaltyListResponse.*:UtilAPIFetchPenaltyListResponse.UtilAPIFetchPenaltyListResponse[I].(XMLNSC.Attribute)*:nil = FIELDVALUE(InputRoot.SOAP.*:Body.*:FetchPenaltyListResponse.*:FetchPenaltyListResult.*:FetchPenaltyListResponse.*:UtilAPIFetchPenaltyListResponse.*:UtilAPIFetchPenaltyListResponse.(XMLNSC.Attribute)nil);
			SET I = I+1;
			MOVE iRef NEXTSIBLING;
		END WHILE;
		SET OutputBodyRef.*:Body.*:FetchPenaltyListResponse.*:FetchPenaltyListResult.*:FetchPenaltyListResponse.*:Successful = inputdataRef.*:Successful;
		SET OutputBodyRef.*:Body.*:FetchPenaltyListResponse.*:FetchPenaltyListResult.*:FetchPenaltyListResponse.*:Remarks = inputdataRef.*:Remarks;

		SET Environment.outputData = OutputRoot.SOAP;
		----------------------------------------------------
		----------------------Response Logging-------------------------
		MOVE domainDataRef TO OutputRoot.SOAP;
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		MOVE OutRef TO OutputRoot.XMLNSC;
		SET OutputRoot.SOAP = NULL;

		CALL PayloadLogging(envRef.id,Environment.reqPayload,'CHANNEL_RES',MessageFlowLabel,OutRef);

		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.HTTPResponseHeader = InputRoot.HTTPResponseHeader;
		SET OutputRoot.SOAP = Environment.outputData;

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ CHANNEL_RES ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'Response data is: '||Environment.resPayload) INTO rc;

		SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = envRef.RequestIdentifier;

	END;
END MODULE;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------


CREATE COMPUTE MODULE BuildExceptionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildExceptionResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE BuildExceptionResponse() BEGIN
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'..............Error Logging Started...........') INTO rc;
		--DECLARE inRef REFERENCE TO InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment.Variables;
		DECLARE enRef REFERENCE TO Environment;
		DECLARE outRefer,outRef REFERENCE TO OutputRoot;
		--DECLARE encodeID INTEGER InputRoot.Properties.Encoding;
		--DECLARE ccsID INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputBody;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE excpPayload CHARACTER getPayLoad(domainName,domainDataRef,envRef.Encoding,envRef.CodedCharSetId);
		CREATE LASTCHILD OF Environment AS enRef DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF enRef AS enRef NAMESPACE 'soapenv' NAME 'Envelope';
		CREATE LASTCHILD OF enRef AS enRef NAMESPACE 'soapenv' NAME 'Body';
		CREATE LASTCHILD OF enRef AS enRef NAMESPACE 'esb' NAME ApplicationLabel;
		CALL BuildExceptionDetails(excpRef,enRef,ApplicationLabel);
		SET envRef.UserDefinedException = Environment.XMLNSC;
		MOVE domainDataRef TO Environment.XMLNSC;
		SET domainName = FIELDNAME(domainDataRef);
		DECLARE resPayload CHAR getPayLoad(domainName,domainDataRef,envRef.Encoding,envRef.CodedCharSetId);
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'Application Built Exception:'||resPayload) INTO rc;
		DECLARE inputRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'ExceptionDetails';
		DECLARE outExcpRef REFERENCE TO OutputRoot.XMLNSC.ExceptionDetails;
		SET outExcpRef.Msg_Id = envRef.id;
		SET outExcpRef.ExceptionType = inputRef.excpType;
		SET outExcpRef.ExceptionNumber = inputRef.excpNumber;
		SET outExcpRef.ExceptionLable = inputRef.excpLable;
		SET outExcpRef.ExceptionDescription = inputRef.excpText;
		SET outExcpRef.ActualExceptionText = inputRef.actualExcpText;

		SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = envRef.RequestIdentifier;
		CALL writeToLogFile(MessageFlowLabel, LOGGER_NAME,LOG_TYPE,'..............End of Error Logging ...........') INTO rc;
	END;
END MODULE;