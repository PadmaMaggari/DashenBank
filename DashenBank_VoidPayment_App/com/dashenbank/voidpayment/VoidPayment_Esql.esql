


BROKER SCHEMA com.dashenbank.voidpayment
PATH com.dashenbank.genericfunctions;

-- DECLARE ns NAMESPACE 'http://www.example.org/VoidPayment/';

DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE LOG4J_ERROR EXTERNAL CHARACTER '';
DECLARE BACKEND_URL EXTERNAL CHARACTER '';
DECLARE LOGGER_NAME EXTERNAL CHARACTER '';
DECLARE LOG_TYPE EXTERNAL CHARACTER '';

--------Global Variables----------

DECLARE rc BOOLEAN TRUE;

CREATE COMPUTE MODULE RequestToFlexCube
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = TRUE) THEN
			CALL CopyEntireMessage();
		ELSE
			SET OutputRoot.XMLNSC.Log.Message = LOG4J_ERROR;
		END IF;
		RETURN TRUE;
	END;


	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE id CHARACTER InputRoot.SOAP.Body.*:VoidPayment.providerID;
		SET Environment.id = id;

		
		SET Environment.domainDataRef = InputRoot.SOAP;
		SET Environment.ReplyIdentifier = InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier;

		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		-- SET Environment.REQUEST_PAYLOAD = Environment.reqPayload;

		----------------------------------------------------
		----------------------Request Logging-------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(id,Environment.reqPayload,'CHANNEL_REQ',ApplicationLabel,OutRef);

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ CHANNEL_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'CHANNEL_REQ data is: '||Environment.reqPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -----------------------------------------------------------------------') INTO rc;
		----------------------------------------------------
		-------------Business Logic-------------------------
		DECLARE InputRef REFERENCE TO InputRoot.SOAP.Body.*:VoidPayment;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outDataRef REFERENCE TO OutputRoot.SOAP;

		SET outDataRef.Body.*:VoidPayment.providerID = InputRef.providerID;
		SET outDataRef.Body.*:VoidPayment.appcode = InputRef.appcode;
		SET outDataRef.Body.*:VoidPayment.apppassphrase = InputRef.apppassphrase;
		SET outDataRef.Body.*:VoidPayment.token = InputRef.token;
		SET outDataRef.Body.*:VoidPayment.licenseNumber = InputRef.licenseNumber;
		SET outDataRef.Body.*:VoidPayment.ReceiptNo = InputRef.ReceiptNo;
		SET Environment.outputData = OutputRoot.SOAP;


        ----------------------------------------------------
		----------------------Response Logging-------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE outRefData REFERENCE TO OutputRoot.XMLNSC;
		MOVE domainDataRef TO OutputRoot.SOAP;
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		CALL PayloadLogging(id,Environment.resPayload,'FLEXCUBE_REQ',ApplicationLabel,outRefData);
		
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.SOAP = Environment.outputData;

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ FLEXCUBE_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'FLEXCUBE_REQ data is: '||Environment.resPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -----------------------------------------------------------------------') INTO rc;

		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = BACKEND_URL;
	END;
END MODULE;

---------------------------------------------------------------------------------------------------------------------------------------------------


CREATE COMPUTE MODULE ResponseToChannel
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CALL CopyEntireMessage();

		RETURN TRUE;
	END;


	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET Environment.domainDataRef = InputRoot.SOAP;
        DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);


		----------------------------------------------------
		----------------------Request Logging-------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(Environment.id,Environment.reqPayload,'FLEXCUBE_RES',ApplicationLabel,OutRef);

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------- FLEXCUBE_RES -------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'FLEXCUBE_RES data  is: '||Environment.reqPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ----------------------------------------------------------------------') INTO rc;
		
		

		----------------------------------------------------
		-------------Business Logic-------------------------
		DECLARE InputRef REFERENCE TO InputRoot.SOAP.Body.*:VoidPaymentResponse.VoidPaymentResult.VoidPaymentResponse;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outDataRef REFERENCE TO OutputRoot.SOAP;
		SET outDataRef.Body.*:VoidPaymentResponse.VoidPaymentResult.VoidPaymentResponse.Remarks = InputRef.Remarks;
		SET outDataRef.Body.*:VoidPaymentResponse.VoidPaymentResult.VoidPaymentResponse.Successful = InputRef.Successful;
		SET outDataRef.Body.*:VoidPaymentResponse.VoidPaymentResult.VoidPaymentResponse.UtilAPIVoidPaymentResponse.ErrorCode = InputRef.UtilAPIVoidPaymentResponse.ErrorCode;
		SET outDataRef.Body.*:VoidPaymentResponse.VoidPaymentResult.VoidPaymentResponse.UtilAPIVoidPaymentResponse.ErrorMessage = InputRef.UtilAPIVoidPaymentResponse.ErrorMessage;
		SET outDataRef.Body.*:VoidPaymentResponse.VoidPaymentResult.VoidPaymentResponse.UtilAPIVoidPaymentResponse.IsSaved = InputRef.UtilAPIVoidPaymentResponse.IsSaved;
        SET Environment.outputData = OutputRoot.SOAP;
         
        ----------------------------------------------------
		----------------------Response Logging-------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE outputRef REFERENCE TO OutputRoot.XMLNSC;
		MOVE domainDataRef TO OutputRoot.SOAP;
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		CALL PayloadLogging(Environment.id,Environment.resPayload,'CHANNEL_RES',ApplicationLabel,outputRef);
		
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.HTTPResponseHeader = InputRoot.HTTPResponseHeader;
		SET OutputRoot.SOAP = Environment.outputData;

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -------- CHANNEL_RES -------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'CHANNEL_RES data is: '||Environment.resPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'**********************************************************************') INTO rc;

	END;
END MODULE;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------



CREATE COMPUTE MODULE VoidPayment_BuildExceptionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildExceptionResponse();
		RETURN TRUE;
	END;


	CREATE PROCEDURE BuildExceptionResponse() BEGIN
		CALL writeToLogFile(MessageFlowLabel, LOGGER_NAME,LOG_TYPE,'..............Error Logging Started...........') INTO rc;
		DECLARE inRef REFERENCE TO InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment;
		DECLARE outRefer,outRef REFERENCE TO OutputRoot;
		DECLARE encodeID INTEGER InputRoot.Properties.Encoding;
		DECLARE ccsID INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputBody;
		--DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		--DECLARE excpPayload CHARACTER getPayLoad(domainName,domainDataRef,encodeID,ccsID);
		--CREATE LASTCHILD OF Environment AS envRef DOMAIN 'XMLNSC';
		---CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Envelope';
		--CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Body';
		--CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'esb' NAME 'BatchUpload';
		--CALL BuildExceptionDetails(excpRef,envRef,'BatchUpload');
		--SET Environment.Variables.UserDefinedException = Environment.XMLNSC;
		--MOVE domainDataRef TO Environment.XMLNSC;
		--SET domainName = FIELDNAME(domainDataRef);
		DECLARE resPayload CHAR getPayLoad(domainName,domainDataRef,encodeID,ccsID);
		CALL writeToLogFile(MessageFlowLabel, LOGGER_NAME,LOG_TYPE,'Application Built Exception:'||resPayload) INTO rc;
		------------Error Logging in DB----------
		--CALL ConstructErrorDBLog(CURRENT_TIMESTAMP,CREATED_BY,envRef.ErrorType,MessageFlowLabel,ApplicationLabel,ExecutionGroupLabel,
		---excpPayload,Environment.REQUEST_PAYLOAD,excpRef.excpNumber,envRef.ErrorCode,outRef);
		-------------------------------------------
		SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
		SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = Environment.Variables.RequestIdentifier;
		CALL writeToLogFile(MessageFlowLabel, LOGGER_NAME,LOG_TYPE,'..............End of Error Logging ...........') INTO rc;
		
	END;
END MODULE;
