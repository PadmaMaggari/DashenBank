

BROKER SCHEMA com.dashenbank.accountbalanceenquiry
PATH com.dashenbank.genericfunctions;
DECLARE ns NAMESPACE 'http://fcubs.ofss.com/service/FCUBSAccService';
DECLARE LOG4J_CONFIG_PATH, LOG4J_ERROR_MSG, BACKEND_URL, LOGGER_NAME, LOG_TYPE EXTERNAL CHARACTER;
--------------Global variables----------
DECLARE rc BOOLEAN TRUE;
-------------------------------------
CREATE COMPUTE MODULE RequestToBackend
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG4J_CONFIG_PATH) INTO rc;
		IF (rc = TRUE) THEN
			CALL RequestToBackend();
		ELSE
			SET OutputRoot.XMLNSC.Log.Message = LOG4J_ERROR_MSG;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE RequestToBackend() BEGIN
		SET Environment.domainDataRef = InputRoot.SOAP;
		DECLARE ccidRef, encodeRef INTEGER;
		DECLARE envRef REFERENCE TO Environment.Variables;
		CREATE LASTCHILD OF Environment AS envRef NAME 'Variables';

		SET ccidRef = InputRoot.Properties.CodedCharSetId;
		SET encodeRef = InputRoot.Properties.Encoding;
		SET envRef.Encoding = encodeRef;
		SET envRef.CodedCharSetId = ccidRef;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);

		SET envRef.RequestIdentifier = CAST(InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier AS CHARACTER);
		SET envRef.ReplyIdentifier = InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier;
		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET envRef.id = InputRoot.SOAP.Body.*:QUERYACCBAL_IOFS_REQ.*:FCUBS_HEADER.*:MSGID;
		----------------------Request Logging-------------------------
		-- CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		-- DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		-- CALL PayloadLogging(envRef.id,Environment.reqPayload,'CHANNEL_REQ',ApplicationLabel,OutRef);
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'**********************************************************************') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ CHANNEL_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'CHANNEL_REQ data is: '||Environment.reqPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -----------------------------------------------------------------------') INTO rc;
		------------------- Generating request to Backend ---------------------
		DECLARE inputHeaderRef REFERENCE TO InputRoot.SOAP.Body.*:QUERYACCBAL_IOFS_REQ.*:FCUBS_HEADER;
		DECLARE inputBodyRef REFERENCE To InputRoot.SOAP.Body.*:QUERYACCBAL_IOFS_REQ.*:FCUBS_BODY.*:"ACC-Balance".*:ACC_BAL;

		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';

		SET OutputRoot.SOAP.Context = InputRoot.SOAP.Context;

		CREATE LASTCHILD OF OutputRoot.SOAP NAME 'Body';
		CREATE LASTCHILD OF OutputRoot.SOAP.Body NAMESPACE ns NAME 'QUERYACCBAL_IOFS_REQ';
		CREATE LASTCHILD OF OutputRoot.SOAP.Body.ns:QUERYACCBAL_IOFS_REQ NAMESPACE ns NAME 'FCUBS_HEADER';
		CREATE LASTCHILD OF OutputRoot.SOAP.Body.ns:QUERYACCBAL_IOFS_REQ NAMESPACE ns NAME 'FCUBS_BODY';
		CREATE LASTCHILD OF OutputRoot.SOAP.Body.ns:QUERYACCBAL_IOFS_REQ.ns:FCUBS_BODY NAMESPACE ns NAME 'ACC-Balance';
		CREATE LASTCHILD OF OutputRoot.SOAP.Body.ns:QUERYACCBAL_IOFS_REQ.ns:FCUBS_BODY.ns:"ACC-Balance" NAMESPACE ns NAME 'ACC_BAL';

		DECLARE outputHeaderRef REFERENCE TO OutputRoot.SOAP.Body.ns:QUERYACCBAL_IOFS_REQ.ns:FCUBS_HEADER;
		DECLARE outputBodyRef REFERENCE TO OutputRoot.SOAP.Body.ns:QUERYACCBAL_IOFS_REQ.ns:FCUBS_BODY.ns:"ACC-Balance".ns:ACC_BAL;

		SET outputHeaderRef.ns:SOURCE = inputHeaderRef.*:SOURCE;
		SET outputHeaderRef.ns:UBSCOMP = inputHeaderRef.*:UBSCOMP;
		SET outputHeaderRef.ns:MSGID = inputHeaderRef.*:MSGID;
		SET outputHeaderRef.ns:CORRELID = inputHeaderRef.*:CORRELID;
		SET outputHeaderRef.ns:USERID = inputHeaderRef.*:USERID;
		SET outputHeaderRef.ns:ENTITY = inputHeaderRef.*:ENTITY;
		SET outputHeaderRef.ns:BRANCH = inputHeaderRef.*:BRANCH;
		SET outputHeaderRef.ns:MODULEID = inputHeaderRef.*:MODULEID;
		SET outputHeaderRef.ns:SERVICE = inputHeaderRef.*:SERVICE;
		SET outputHeaderRef.ns:OPERATION = inputHeaderRef.*:OPERATION;
		SET outputHeaderRef.ns:SOURCE_OPERATION = inputHeaderRef.*:SOURCE_OPERATION;
		SET outputHeaderRef.ns:SOURCE_USERID = inputHeaderRef.*:SOURCE_USERID;
		SET outputHeaderRef.ns:DESTINATION = inputHeaderRef.*:DESTINATION;
		SET outputHeaderRef.ns:MULTITRIPID = inputHeaderRef.*:MULTITRIPID;
		SET outputHeaderRef.ns:FUNCTIONID = inputHeaderRef.*:FUNCTIONID;
		SET outputHeaderRef.ns:ACTION = inputHeaderRef.*:ACTION;
		SET outputHeaderRef.ns:MSGSTAT = inputHeaderRef.*:MSGSTAT;
		SET outputHeaderRef.ns:SNAPSHOTID = inputHeaderRef.*:SNAPSHOTID;
		SET outputHeaderRef.ns:PASSWORD = inputHeaderRef.*:PASSWORD;

		DECLARE inrefheader REFERENCE TO inputHeaderRef.*:ADDL.*:PARAM[>];
		DECLARE I INTEGER 1;
		WHILE LASTMOVE(inrefheader) DO
			SET outputHeaderRef.ADDL.ns:PARAM[I].ns:NAME = inputHeaderRef.*:ADDL.*:PARAM.*:NAME;
			SET outputHeaderRef.ADDL.ns:PARAM[I].ns:VALUE = inputHeaderRef.*:ADDL.*:PARAM.*:VALUE;
			SET I = I + 1;
			MOVE inrefheader NEXTSIBLING REPEAT TYPE NAME;
		END WHILE;

		SET outputBodyRef.ns:BRANCH_CODE = inputBodyRef.*:BRANCH_CODE;
		SET outputBodyRef.ns:CUST_AC_NO = inputBodyRef.*:CUST_AC_NO;

		SET Environment.outputData = OutputRoot.SOAP;
		---------------------- Response Logging -------------------------
		MOVE domainDataRef TO OutputRoot.SOAP;
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		-- CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		-- MOVE OutRef TO OutputRoot.XMLNSC;
		-- CALL PayloadLogging(envRef.id,Environment.resPayload,'BACKEND_REQ',MessageFlowLabel,OutRef);

		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.HTTPInputHeader = InputRoot.HTTPInputHeader;
		SET OutputRoot.SOAP = Environment.outputData;

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ BACKEND_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'BACKEND_REQ data is: '||Environment.resPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -----------------------------------------------------------------------') INTO rc;

		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = BACKEND_URL;
	END;
END MODULE;
---------------------------------------------------------------------------------------------------

CREATE COMPUTE MODULE ResponseToChannel
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL ResponseToChannel();
		RETURN TRUE;
	END;
	CREATE PROCEDURE ResponseToChannel() BEGIN
		SET Environment.domainDataRef = InputRoot.SOAP;
		DECLARE ccidRef, encodeRef INTEGER;
		DECLARE envRef REFERENCE TO Environment.Variables;

		SET ccidRef = InputRoot.Properties.CodedCharSetId;
		SET encodeRef = InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		----------------------Request Logging-------------------------
		-- CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		-- DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		-- CALL PayloadLogging(envRef.id,Environment.reqPayload,'BACKEND_RESP',ApplicationLabel,OutRef);

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------- BACKEND_RESP -------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'BACKEND_RESP data  is: '||Environment.reqPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ----------------------------------------------------------------------') INTO rc;
		-------------- Generating response to channel ---------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';

		SET OutputRoot.SOAP.Context = InputRoot.SOAP.Context;

		DECLARE inputHeaderRef REFERENCE TO InputRoot.SOAP.*:Body.*:QUERYACCBAL_IOFS_RES.*:FCUBS_HEADER;
		DECLARE inputBodyRef REFERENCE TO InputRoot.SOAP.*:Body.*:QUERYACCBAL_IOFS_RES.*:FCUBS_BODY;

		CREATE LASTCHILD OF OutputRoot.SOAP NAME 'Body';
		CREATE LASTCHILD OF OutputRoot.SOAP.Body NAMESPACE ns NAME 'QUERYACCBAL_IOFS_RES';
		CREATE LASTCHILD OF OutputRoot.SOAP.Body.ns:QUERYACCBAL_IOFS_RES NAME 'FCUBS_HEADER';
		CREATE LASTCHILD OF OutputRoot.SOAP.Body.ns:QUERYACCBAL_IOFS_RES NAME 'FCUBS_BODY';

		DECLARE outputheaderRef REFERENCE TO OutputRoot.SOAP.Body.ns:QUERYACCBAL_IOFS_RES.FCUBS_HEADER;
		DECLARE outputbodyRef REFERENCE TO OutputRoot.SOAP.Body.ns:QUERYACCBAL_IOFS_RES.FCUBS_BODY;

		SET outputheaderRef.SOURCE = inputHeaderRef.*:SOURCE;
		SET outputheaderRef.UBSCOMP = inputHeaderRef.*:UBSCOMP;
		SET outputheaderRef.MSGID = inputHeaderRef.*:MSGID;
		SET outputheaderRef.CORRELID = inputHeaderRef.*:CORRELID;
		SET outputheaderRef.USERID = inputHeaderRef.*:USERID;
		SET outputheaderRef.ENTITY = inputHeaderRef.*:ENTITY;
		SET outputheaderRef.BRANCH = inputHeaderRef.*:BRANCH;
		SET outputheaderRef.MODULEID = inputHeaderRef.*:MODULEID;
		SET outputheaderRef.SERVICE = inputHeaderRef.*:SERVICE;
		SET outputheaderRef.OPERATION = inputHeaderRef.*:OPERATION;
		SET outputheaderRef.SOURCE_OPERATION = inputHeaderRef.*:SOURCE_OPERATION;
		SET outputheaderRef.SOURCE_USERID = inputHeaderRef.*:SOURCE_USERID;
		SET outputheaderRef.DESTINATION = inputHeaderRef.*:DESTINATION;
		SET outputheaderRef.MULTITRIPID = inputHeaderRef.*:MULTITRIPID;
		SET outputheaderRef.FUNCTIONID = inputHeaderRef.*:FUNCTIONID;
		SET outputheaderRef.ACTION = inputHeaderRef.*:ACTION;
		SET outputheaderRef.MSGSTAT = inputHeaderRef.*:MSGSTAT;
		SET outputheaderRef.SNAPSHOTID = inputHeaderRef.*:SNAPSHOTID;
		SET outputheaderRef.PASSWORD = inputHeaderRef.*:PASSWORD;

		DECLARE I INTEGER 1;
		DECLARE J INTEGER CARDINALITY(inputHeaderRef.*:ADDL.*:PARAM[]);
		DECLARE inRef REFERENCE TO inputHeaderRef.*:ADDL.*:PARAM[>];
		WHILE I<=J DO
			SET outputheaderRef.ADDL.PARAM[I].*:NAME = inRef.*:NAME;
			SET outputheaderRef.ADDL.PARAM[I].*:VALUE = inRef.*:VALUE;
			SET I = I + 1;
			MOVE inRef NEXTSIBLING REPEAT TYPE NAME;
		END WHILE;

		SET outputbodyRef."ACC-Balance".ACC_BAL.BRANCH_CODE = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:BRANCH_CODE;
		SET outputbodyRef."ACC-Balance".ACC_BAL.CUST_AC_NO = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:CUST_AC_NO;
		SET outputbodyRef."ACC-Balance".ACC_BAL.CCY = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:CCY;
		SET outputbodyRef."ACC-Balance".ACC_BAL.TRNDT = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:TRNDT;
		SET outputbodyRef."ACC-Balance".ACC_BAL.OPNBAL = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:OPNBAL;
		SET outputbodyRef."ACC-Balance".ACC_BAL.CURBAL = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:CURBAL;
		SET outputbodyRef."ACC-Balance".ACC_BAL.AVLBAL = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:AVLBAL;
		SET outputbodyRef."ACC-Balance".ACC_BAL.UNCOLAMT = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:UNCOLAMT;
		SET outputbodyRef."ACC-Balance".ACC_BAL.AVLCR = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:AVLCR;
		SET outputbodyRef."ACC-Balance".ACC_BAL.MTDTOVCR = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:MTDTOVCR;
		SET outputbodyRef."ACC-Balance".ACC_BAL.MTDTOVDR = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:MTDTOVDR;
		SET outputbodyRef."ACC-Balance".ACC_BAL.ACY_BKD_AMT = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:ACY_BKD_AMT;
		SET outputbodyRef."ACC-Balance".ACC_BAL.ACCR_DR = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:ACCR_DR;
		SET outputbodyRef."ACC-Balance".ACC_BAL.ACCR_CR = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:ACCR_CR;
		SET outputbodyRef."ACC-Balance".ACC_BAL.SUBLIMIT = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:SUBLIMIT;
		SET outputbodyRef."ACC-Balance".ACC_BAL.TODLIMIT = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:TODLIMIT;
		SET outputbodyRef."ACC-Balance".ACC_BAL.TOD_ST_DT = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:TOD_ST_DT;
		SET outputbodyRef."ACC-Balance".ACC_BAL.TOD_EXP_DT = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:TOD_EXP_DT;
		SET outputbodyRef."ACC-Balance".ACC_BAL.ACY_TANK_CR = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:ACY_TANK_CR;
		SET outputbodyRef."ACC-Balance".ACC_BAL.ACY_TANK_DR = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:ACY_TANK_DR;
		SET outputbodyRef."ACC-Balance".ACC_BAL.ACY_TANK_UNCOL = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:ACY_TANK_UNCOL;
		SET outputbodyRef."ACC-Balance".ACC_BAL.ACY_UNAUTH_DR = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:ACY_UNAUTH_DR;
		SET outputbodyRef."ACC-Balance".ACC_BAL.ACY_UNAUTH_TANK_DR = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:ACY_UNAUTH_TANK_DR;
		SET outputbodyRef."ACC-Balance".ACC_BAL.ACY_UNAUTH_CR = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:ACY_UNAUTH_CR;
		SET outputbodyRef."ACC-Balance".ACC_BAL.ACY_UNAUTH_TANK_CR = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:ACY_UNAUTH_TANK_CR;
		SET outputbodyRef."ACC-Balance".ACC_BAL.ACY_UNAUTH_UNCOL = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:ACY_UNAUTH_UNCOL;
		SET outputbodyRef."ACC-Balance".ACC_BAL.ACY_UNAUTH_TANK_UNCOL = inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:ACY_UNAUTH_TANK_UNCOL;

		SET I = 1;
		SET J = CARDINALITY(inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:INTLIQD[]);
		MOVE inRef TO inputBodyRef.*:"ACC-Balance".*:ACC_BAL.*:INTLIQD[>];
		WHILE I<=J DO
			SET outputbodyRef."ACC-Balance".ACC_BAL.INTLIQD[I].*:INTPRD = inRef.*:INTPRD;
			SET outputbodyRef."ACC-Balance".ACC_BAL.INTLIQD[I].*:NXTLIQDT = inRef.*:NXTLIQDT;
			SET I = I + 1;
			MOVE inRef NEXTSIBLING REPEAT TYPE NAME;
		END WHILE;

		SET I = 1;
		SET J = CARDINALITY(inputBodyRef.*:FCUBS_ERROR_RESP.*:ERROR[]);
		MOVE inRef TO inputBodyRef.*:FCUBS_ERROR_RESP.*:ERROR[>];
		WHILE I<=J Do
			SET outputbodyRef.FCUBS_ERROR_RESP.ERROR[I].ECODE = inRef.*:ECODE;
			SET outputbodyRef.FCUBS_ERROR_RESP.ERROR[I].EDESC = inRef.*:EDESC;
			SET I = I + 1;
			MOVE inRef NEXTSIBLING REPEAT TYPE NAME;
		END WHILE;

		SET I = 1;
		SET J = CARDINALITY(inputBodyRef.*:FCUBS_WARNING_RESP.*:WARNING[]);
		MOVE inRef TO inputBodyRef.*:FCUBS_WARNING_RESP.*:WARNING[>];
		WHILE I<=J Do
			SET outputbodyRef.FCUBS_WARNING_RESP.WARNING[I].WCODE = inRef.*:WCODE;
			SET outputbodyRef.FCUBS_WARNING_RESP.WARNING[I].WDESC = inRef.*:WDESC;
			SET I = I + 1;
			MOVE inRef NEXTSIBLING REPEAT TYPE NAME;
		END WHILE;

		SET Environment.outputData = OutputRoot.SOAP;
		---------------------- Response Logging -------------------------
		MOVE domainDataRef TO Environment.outputData;
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		-- CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		-- MOVE OutRef TO OutputRoot.XMLNSC;
		-- CALL PayloadLogging(envRef.id,Environment.reqPayload,'CHANNEL_RESP',MessageFlowLabel,OutRef);
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.HTTPResponseHeader = InputRoot.HTTPResponseHeader;
		SET OutputRoot.SOAP = Environment.outputData;

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -------- CHANNEL_RESP -------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'CHANNEL_RESP data is: '||Environment.resPayload) INTO rc;

	END;
END MODULE;
-------------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE AccountBalanceEnquiry_BuildExceptionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildExceptionResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE BuildExceptionResponse() BEGIN
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'..............Error Logging Started...........') INTO rc;
		--DECLARE inRef REFERENCE TO InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment.Variables;
		DECLARE enRef REFERENCE TO Environment;
		DECLARE outRefer,outRef REFERENCE TO OutputRoot;
		--DECLARE encodeID INTEGER InputRoot.Properties.Encoding;
		--DECLARE ccsID INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputBody;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE excpPayload CHARACTER getPayLoad(domainName,domainDataRef,envRef.Encoding,envRef.CodedCharSetId);
		CREATE LASTCHILD OF Environment AS enRef DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF enRef AS enRef NAMESPACE 'soapenv' NAME 'Envelope';
		CREATE LASTCHILD OF enRef AS enRef NAMESPACE 'soapenv' NAME 'Body';
		CREATE LASTCHILD OF enRef AS enRef NAMESPACE 'esb' NAME ApplicationLabel;
		CALL BuildExceptionDetails(excpRef,enRef,ApplicationLabel);
		SET envRef.UserDefinedException = Environment.XMLNSC;
		MOVE domainDataRef TO Environment.XMLNSC;
		SET domainName = FIELDNAME(domainDataRef);
		DECLARE resPayload CHAR getPayLoad(domainName,domainDataRef,envRef.Encoding,envRef.CodedCharSetId);
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'Application Built Exception:'||resPayload) INTO rc;
		DECLARE inputRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'ExceptionDetails';
		DECLARE outExcpRef REFERENCE TO OutputRoot.XMLNSC.ExceptionDetails;
		SET outExcpRef.Msg_Id = envRef.id;
		SET outExcpRef.ExceptionType = inputRef.excpType;
		SET outExcpRef.ExceptionNumber = inputRef.excpNumber;
		SET outExcpRef.ExceptionLable = inputRef.excpLable;
		SET outExcpRef.ExceptionDescription = inputRef.excpText;
		SET outExcpRef.ActualExceptionText = inputRef.actualExcpText;

		SET OutputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier = envRef.ReplyIdentifier;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'..............End of Error Logging ...........') INTO rc;
	END;
END MODULE;