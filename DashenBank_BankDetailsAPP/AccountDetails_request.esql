
PATH com.dashenbank.genericfunctions;
DECLARE rc BOOLEAN;
	DECLARE LOG4J_PATH EXTERNAL CHARACTER;
	DECLARE LOG4J_ERROR EXTERNAL CHARACTER;
	DECLARE CBS_URL EXTERNAL CHARACTER;
	DECLARE DSN_name EXTERNAL CHARACTER;
	DECLARE LOGGERNAME EXTERNAL CHARACTER;
	DECLARE LOG_TYPE EXTERNAL CHARACTER;
	
CREATE COMPUTE MODULE AccountDetails_Esql
	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL  initLog4j(LOG4J_PATH) INTO rc;
		IF (rc = TRUE) THEN
		       CALL AccountDetailsRequest();
	      ELSE
			SET OutputRoot.XMLNSC.Log.Message = LOG4J_ERROR;
		END IF;
		RETURN TRUE;
	END;

	
	CREATE PROCEDURE AccountDetailsRequest() BEGIN

        DECLARE MSGID CHARACTER InputRoot.SOAP.Body.*:FCUBS_REQ_ENV.FCUBS_HEADER.MSGID;
	    SET Environment.MSGID = MSGID;
	    SET Environment.ccidRef = InputRoot.Properties.CodedCharSetId;
        SET Environment.encodeRef = InputRoot.Properties.Encoding;
	    SET Environment.domainDataRef = InputRoot.XMLNSC;
	    SET Environment.domainName = FIELDNAME(InputBody); 
	    
	   DECLARE uniqueID INTEGER;
	   DECLARE TRANSACTION_STATUS CHARACTER 'Request Received from END USER';
	   DECLARE CREATED_ON TIMESTAMP CURRENT_TIMESTAMP;
	   DECLARE CREATED_BY CHARACTER 'ACE USER';
	   DECLARE SERVICE_NAME CHARACTER InputRoot.SOAP.Body.*:FCUBS_REQ_ENV.FCUBS_HEADER.SERVICE;
	   DECLARE OPERATIONNAME CHARACTER InputRoot.SOAP.Body.*:FCUBS_REQ_ENV.FCUBS_HEADER.OPERATION;
	  
--	   INSERT INTO Database.TRANSACTION_LOG(SEQ_ID,MSG_ID,SERVICE_NAME,OPERATION_NAME,TRANSACTION_STATUS,CREATED_ON,CREATED_BY) VALUES(uniqueID.NEXTVAL,MSGID,SERVICE_NAME,OPERATIONNAME,TRANSACTION_STATUS,CREATED_ON,CREATED_BY);
	   PASSTHRU 'INSERT INTO TRANSACTION_LOG VALUES(?,?,?,?,?,?,?)' TO Database.{DSN_name} VALUES(uniqueID.NEXTVAL,MSGID,SERVICE_NAME,TRANSACTION_STATUS,CREATED_ON,CREATED_BY,OPERATIONNAME); 
       DECLARE ccidRef INTEGER Environment.ccidRef;
       DECLARE encodeRef INTEGER Environment.encodeRef;
	   DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
	   DECLARE domainName CHARACTER Environment.domainName; 
	   DECLARE payload CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
	   CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
	   DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
	   CALL PayloadLogging(MSGID,payload,'CHANNEL_REQ',MessageFlowLabel,OutRef);
	    
	    CALL writeToLogFile(MessageFlowLabel,LOGGERNAME,LOG_TYPE,'..........Request Received from channel...........') INTO rc;
	    CALL writeToLogFile(MessageFlowLabel,LOGGERNAME,LOG_TYPE,'Request data is: '||payload) INTO rc;
	    DECLARE ns NAMESPACE 'http://fcubs.iflex.com/service/FCUBSAccService/QueryAccBal'; 
	    DECLARE soapenv NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
	     
	    SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = CBS_URL;
	    DECLARE soapRef,soapheader,headRef,bodyRef REFERENCE TO OutputRoot;
	    CREATE LASTCHILD OF soapRef AS soapRef DOMAIN 'SOAP';
        CREATE LASTCHILD OF soapRef AS soapheader NAME 'Header';

        CREATE LASTCHILD OF soapRef AS soapRef NAME 'Body';
        CREATE LASTCHILD OF soapRef AS soapRef NAMESPACE ns NAME 'FCUBS_REQ_ENV';
        CREATE LASTCHILD OF soapRef AS headRef NAMESPACE ns NAME 'FCUBS_HEADER';
        CREATE LASTCHILD OF soapRef AS bodyRef NAMESPACE ns NAME 'FCUBS_BODY';
         
        SET headRef.ns:SOURCE = InputRoot.SOAP.Body.ns:FCUBS_REQ_ENV.FCUBS_HEADER.SOURCE;
		SET headRef.ns:UBSCOMP=InputRoot.SOAP.Body.ns:FCUBS_REQ_ENV.FCUBS_HEADER.UBSCOMP;
        SET headRef.ns:BRANCH=InputRoot.SOAP.Body.ns:FCUBS_REQ_ENV.FCUBS_HEADER.BRANCH;
        SET headRef.ns:CORRELID=InputRoot.SOAP.Body.ns:FCUBS_REQ_ENV.FCUBS_HEADER.CORRELID;
        SET headRef.ns:OPERATION=InputRoot.SOAP.Body.ns:FCUBS_REQ_ENV.FCUBS_HEADER.OPERATION;
        SET headRef.ns:SERVICE=InputRoot.SOAP.Body.ns:FCUBS_REQ_ENV.FCUBS_HEADER.SERVICE;
        SET headRef.ns:SOURCE_USERID=InputRoot.SOAP.Body.ns:FCUBS_REQ_ENV.FCUBS_HEADER.SOURCE_USERID;
        SET headRef.ns:USERID=InputRoot.SOAP.Body.ns:FCUBS_REQ_ENV.FCUBS_HEADER.USERID;
		SET headRef.ns:MSGID=InputRoot.SOAP.Body.ns:FCUBS_REQ_ENV.FCUBS_HEADER.MSGID;
		SET bodyRef.ns:"ACC-ACC-Balance".ns:BRANCH_CODE=InputRoot.SOAP.Body.ns:FCUBS_REQ_ENV.FCUBS_BODY."ACC-ACC-Balance".BRANCH_CODE;
	    SET bodyRef.ns:"ACC-ACC-Balance".ns:CUST_AC_NO=InputRoot.SOAP.Body.ns:FCUBS_REQ_ENV.FCUBS_BODY."ACC-ACC-Balance".CUST_AC_NO;
--      SET OutputRoot.SOAP=InputRoot.SOAP;
        DECLARE CBS_domainDataRef REFERENCE TO OutputRoot.SOAP.Body;
        DECLARE CBD_domainName CHARACTER 'SOAP';
        DECLARE payload_Backend CHARACTER getPayLoad(CBD_domainName,CBS_domainDataRef,encodeRef,ccidRef);
        SET OutputRoot.SOAP = NULL;
        CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
        DECLARE OutRef1 REFERENCE TO OutputRoot.XMLNSC;
        CALL PayloadLogging(Environment.MSGID,payload_Backend,'FLEXCUBE_REQ',MessageFlowLabel,OutRef1);
        CALL writeToLogFile(MessageFlowLabel,LOGGERNAME,LOG_TYPE,'..........Request For backend...........') INTO rc;
	    CALL writeToLogFile(MessageFlowLabel,LOGGERNAME,LOG_TYPE,'Request data is: '||payload_Backend) INTO rc;
	   
		SET OutputRoot= InputRoot;
        DECLARE CBS_TRANSACTION_STATUS CHARACTER 'Request Sent to Backend flow';
	    DECLARE CBS_CREATED_ON TIMESTAMP CURRENT_TIMESTAMP;
	    PASSTHRU 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE MSG_ID=?' TO Database.{DSN_name} VALUES(CBS_TRANSACTION_STATUS,CBS_CREATED_ON,MSGID);
       
		CALL writeToLogFile(MessageFlowLabel,LOGGERNAME,LOG_TYPE,'...............Request Sent to Backend flow..............') INTO rc;
		
	END;
END MODULE;

CREATE COMPUTE MODULE ResponseToFrontend

	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG4J_PATH) INTO rc;
		IF (rc = TRUE) THEN
		  CALL CopyEntireMessage();
		  ELSE
			SET OutputRoot.XMLNSC.Log.Message = LOG4J_ERROR;
		END IF;
		RETURN FALSE;
	END;

	

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE ns NAMESPACE 'http://fcubs.iflex.com/service/FCUBSAccService/QueryAccBal';
   
	    SET Environment.domainName1 = FIELDNAME(InputBody); 
	    
	    DECLARE TRANSACTION_STATUS CHARACTER 'Response Received from Backend flow';
	    DECLARE CREATED_ON TIMESTAMP CURRENT_TIMESTAMP;

	    PASSTHRU 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE MSG_ID=?' TO Database.{DSN_name} VALUES(TRANSACTION_STATUS,CREATED_ON,Environment.MSGID);
	    

      DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
      DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
	  DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
	  DECLARE domainName CHARACTER FIELDNAME(InputBody);  
	  DECLARE payload CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
	  CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
	  DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
	  CALL PayloadLogging(Environment.MSGID,payload,'FLEXCUBE_RESP',MessageFlowLabel,OutRef);
		
		CALL writeToLogFile(MessageFlowLabel,LOGGERNAME,LOG_TYPE,'------------Response Received from Backend flow---------------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGERNAME,LOG_TYPE,'Response data is: '||payload) INTO rc;
		DECLARE Inref REFERENCE TO InputRoot.SOAP.Body.*:FCUBS_RES_ENV.*:FCUBS_HEADER;
		DECLARE InrefBody REFERENCE TO InputRoot.SOAP.Body.*:FCUBS_RES_ENV.*:FCUBS_BODY;
		DECLARE soapRef,headRef,bodyRef REFERENCE TO OutputRoot;
	    CREATE LASTCHILD OF soapRef AS soapRef DOMAIN 'XMLNSC';
   		CREATE LASTCHILD OF soapRef AS soapRef NAMESPACE ns NAME 'FCUBS_RES_ENV';
   		CREATE LASTCHILD OF soapRef AS headRef NAME 'FCUBS_HEADER';
   		CREATE LASTCHILD OF soapRef AS bodyRef NAME 'FCUBS_BODY';
		
		SET headRef.SOURCE=Inref.*:SOURCE;
        SET headRef.UBSCOMP=Inref.*:UBSCOMP;
        SET headRef.BRANCH=Inref.*:BRANCH;
        SET headRef.CORRELID=Inref.*:CORRELID;
        SET headRef.OPERATION=Inref.*:OPERATION;
        SET headRef.SERVICE=Inref.*:SERVICE;
        SET headRef.SOURCE_USERID=Inref.*:SOURCE_USERID;
        SET headRef.USERID=Inref.*:USERID;
        
        SET bodyRef."ACC-Balance".CUST_AC_NO=InrefBody.*:*.*:*.*:CUST_AC_NO;
        SET bodyRef."ACC-Balance".CCY=InrefBody.*:*.*:*.*:CCY;
        SET bodyRef."ACC-Balance".TRNDT=InrefBody.*:*.*:*.*:TRNDT;
        SET bodyRef."ACC-Balance".OPNBAL=InrefBody.*:*.*:*.*:OPNBAL;
        SET bodyRef."ACC-Balance".CURBAL=InrefBody.*:*.*:*.*:CURBAL;
        SET bodyRef."ACC-Balance".AVLBAL=InrefBody.*:*.*:*.*:AVLBAL;
        SET bodyRef."ACC-Balance".UNCOLAMT=InrefBody.*:*.*:*.*:UNCOLAMT;
        SET bodyRef."ACC-Balance".MTDTOVCR=InrefBody.*:*.*:*.*:MTDTOVCR;
        SET bodyRef."ACC-Balance".MTDTOVDR=InrefBody.*:*.*:*.*:MTDTOVDR;
        SET bodyRef."ACC-Balance".ACY_BKD_AMT=InrefBody.*:*.*:*.*:ACY_BKD_AMT;
        SET bodyRef."ACC-Balance".ACCR_DR=InrefBody.*:*.*:*.*:ACCR_DR;
        SET bodyRef."ACC-Balance".ACCR_CR=InrefBody.*:*.*:*.*:ACCR_CR;
        SET bodyRef."ACC-Balance".ACY_TANK_CR=InrefBody.*:*.*:*.*:ACY_TANK_CR;
        SET bodyRef."ACC-Balance".ACY_TANK_DR=InrefBody.*:*.*:*.*:ACY_TANK_DR;
        SET bodyRef."ACC-Balance".ACY_TANK_UNCOL=InrefBody.*:*.*:*.*:ACY_TANK_UNCOL;
        SET bodyRef."ACC-Balance".ACY_UNAUTH_DR=InrefBody.*:*.*:*.*:ACY_UNAUTH_DR;
        SET bodyRef."ACC-Balance".ACY_TANK_UNCOL=InrefBody.*:*.*:*.*:ACY_TANK_UNCOL;
        SET bodyRef."ACC-Balance".ACY_UNAUTH_TANK_DR=InrefBody.*:*.*:*.*:ACY_UNAUTH_TANK_DR;
        SET bodyRef."ACC-Balance".ACY_UNAUTH_CR=InrefBody.*:*.*:*.*:ACY_UNAUTH_CR;
        SET bodyRef."ACC-Balance".ACY_UNAUTH_TANK_CR=InrefBody.*:*.*:*.*:ACY_UNAUTH_TANK_CR;
        SET bodyRef."ACC-Balance".ACY_UNAUTH_UNCOL=InrefBody.*:*.*:*.*:ACY_UNAUTH_UNCOL;
        SET bodyRef."ACC-Balance".ACY_UNAUTH_TANK_UNCOL=InrefBody.*:*.*:*.*:ACY_UNAUTH_TANK_UNCOL;
        PROPAGATE TO TERMINAL 'out' DELETE NONE;

        DECLARE CH_TRANSACTION_STATUS CHARACTER 'Response Sent to END USER';
	    DECLARE CH_CREATED_ON TIMESTAMP CURRENT_TIMESTAMP;
	    
	    PASSTHRU 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE MSG_ID=?' TO Database.{DSN_name} VALUES(CH_TRANSACTION_STATUS,CH_CREATED_ON,Environment.MSGID);
	    
	    
		DECLARE outDataRef REFERENCE TO OutputRoot.XMLNSC;
        DECLARE outDomainName CHARACTER 'XMLNSC';
        DECLARE outputData CHARACTER getPayLoad(outDomainName,outDataRef,encodeRef,ccidRef);
        SET OutputRoot.XMLNSC = NULL;
        CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
        DECLARE OutputRef REFERENCE TO OutputRoot.XMLNSC;
        CALL PayloadLogging(Environment.MSGID,outputData,'CHANNEL_RESP',MessageFlowLabel,OutputRef);
        CALL writeToLogFile(MessageFlowLabel,LOGGERNAME,LOG_TYPE,'------------Response Received from Backend flow---------------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGERNAME,LOG_TYPE,'Response data is: '||outputData) INTO rc;
	    
		
	END;
END MODULE;

CREATE COMPUTE MODULE AccountDetails_BuildExceptionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL BuildExceptionResponse();		RETURN TRUE;
	END;
	
	CREATE PROCEDURE BuildExceptionResponse() BEGIN
		CALL writeToLogFile(MessageFlowLabel,'AccountDetails' ,'DEBUG','..............Error Logging Started...........') INTO rc;
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		DECLARE envRef REFERENCE TO Environment;
		DECLARE outRefer,outRef REFERENCE TO OutputRoot;
		DECLARE encodeID INTEGER InputRoot.Properties.Encoding;
		DECLARE ccsID INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputRoot.XMLNSC;
--		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
--		DECLARE excpPayload CHARACTER getPayLoad(domainName,domainDataRef,encodeID,ccsID);
--		CREATE LASTCHILD OF Environment AS envRef DOMAIN 'XMLNSC';
--		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Envelope';
--		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Body';
--		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'esb' NAME 'BatchUpload';
--		CALL BuildExceptionDetails(excpRef,envRef,'BatchUpload');
--		SET Environment.Variables.UserDefinedException = Environment.XMLNSC;
--		MOVE domainDataRef TO Environment.XMLNSC;
--		SET domainName = FIELDNAME(domainDataRef);
		DECLARE resPayload CHAR getPayLoad(domainName,domainDataRef,encodeID,ccsID);
		CALL writeToLogFile(MessageFlowLabel, 'AccountDetails','DEBUG','Application Built Exception:'||resPayload) INTO rc;
		------------Error  Logging in DB----------
--		CALL ConstructErrorDBLog(CURRENT_TIMESTAMP,CREATED_BY,envRef.ErrorType,MessageFlowLabel,ApplicationLabel,ExecutionGroupLabel,
--		excpPayload,Environment.REQUEST_PAYLOAD,excpRef.excpNumber,envRef.ErrorCode,outRef);
		----------------------------------
		SET OutputRoot.XMLNSC = Environment.XMLNSC;
		SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = Environment.Variables.RequestIdentifier;
		CALL writeToLogFile(MessageFlowLabel, 'AccountDetails','DEBUG','..............End of Error Logging ...........') INTO rc;
	END;
END MODULE;
