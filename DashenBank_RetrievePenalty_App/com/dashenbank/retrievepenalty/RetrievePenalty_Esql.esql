
BROKER SCHEMA com.dashenbank.retrievepenalty
PATH com.dashenbank.genericfunctions;
--DECLARE ns NAMESPACE 'https://www.fintech-group.com/services/Finpay';
--DECLARE soapenv NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
--DECLARE esb NAMESPACE 'http://www.dashenbank.org/ESB_RetrievePenaltyService/';
DECLARE LOG4J_CONFIG_PATH, LOG4J_ERROR_MSG, BACKEND_URL, LOGGER_NAME, LOG_TYPE EXTERNAL CHARACTER;
DECLARE rc BOOLEAN TRUE;

CREATE COMPUTE MODULE RequestToBackend

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG4J_CONFIG_PATH) INTO rc;
		IF (rc = TRUE) THEN
			CALL request_from_channnel();
		ELSE
			SET OutputRoot.SOAP.Body.Log.Message = LOG4J_ERROR_MSG;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE request_from_channnel() BEGIN
		SET Environment.domainDataRef = InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment.Variables;
		CREATE LASTCHILD OF Environment AS envRef NAME 'Variables';

		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		SET envRef.Encoding = encodeRef;
		SET envRef.CodedCharSetId = ccidRef;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);

		SET envRef.RequestIdentifier = CAST(InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier AS CHARACTER);
		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET envRef.id = InputRoot.SOAP.Body.*:RetrievePenalty.*:providerID;
		------------------- Request Logging -------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(envRef.id,Environment.reqPayload,'CHANNEL_REQ',ApplicationLabel,OutRef);

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ CHANNEL_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'CHANNEL_REQ data is: '||Environment.reqPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -----------------------------------------------------------------------') INTO rc;
		------------------- Generating request to Backend ---------------------
		DECLARE inputBodyRef REFERENCE TO InputRoot.SOAP.Body.*:RetrievePenalty;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outputSoapRef REFERENCE TO OutputRoot.SOAP;
		SET outputSoapRef.Body.*:RetrievePenalty.*:providerID = inputBodyRef.*:providerID;
		SET outputSoapRef.Body.*:RetrievePenalty.*:appcode = inputBodyRef.*:appcode;
		SET outputSoapRef.Body.*:RetrievePenalty.*:apppassphrase = inputBodyRef.*:apppassphrase;
		SET outputSoapRef.Body.*:RetrievePenalty.*:token = inputBodyRef.*:token;
		SET outputSoapRef.Body.*:RetrievePenalty.*:licenseNumber = inputBodyRef.*:licenseNumber;
		SET outputSoapRef.Body.*:RetrievePenalty.*:OrderNumber = inputBodyRef.*:OrderNumber;
		SET Environment.outputData = OutputRoot.SOAP;
		---------------------- Response Logging -------------------------
		MOVE domainDataRef TO OutputRoot.SOAP;
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		MOVE OutRef TO OutputRoot.XMLNSC;
		CALL PayloadLogging(envRef.id,Environment.resPayload,'BACKEND_REQ',MessageFlowLabel,OutRef);

		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.SOAP = Environment.outputData;

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ BACKEND_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'BACKEND_REQ data is: '||Environment.resPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -----------------------------------------------------------------------') INTO rc;

		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = BACKEND_URL;
	END;
END MODULE;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE COMPUTE MODULE ResponseToChannel

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL response_from_Backend();
		RETURN TRUE;
	END;
	CREATE PROCEDURE response_from_Backend() BEGIN
		SET Environment.domainDataRef = InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment.Variables;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		---------------------- Request Logging -------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(envRef.id,Environment.reqPayload,'BACKEND_RESP',ApplicationLabel,OutRef);

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------- BACKEND_RESP -------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'BACKEND_RESP data  is: '||Environment.reqPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ----------------------------------------------------------------------') INTO rc;
		------------------ generating response to channel ---------------
		DECLARE inputBodyRef REFERENCE TO InputRoot.SOAP.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse;
		DECLARE inputRef REFERENCE TO InputRoot.SOAP.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outputSoapRef REFERENCE TO OutputRoot.SOAP;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:IsPaid = inputBodyRef.*:IsPaid;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:IsVoid = inputBodyRef.*:IsVoid;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:ErrorCode = inputBodyRef.*:ErrorCode;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:PenalityId = inputBodyRef.*:PenalityId;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:ViolationDate = inputBodyRef.*:ViolationDate;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:DateAccused = inputBodyRef.*:DateAccused;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:TicketNo = inputBodyRef.*:TicketNo;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:ViolationGrade = inputBodyRef.*:ViolationGrade;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:OffenceId = inputBodyRef.*:OffenceId;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:PenalityPoints = inputBodyRef.*:PenalityPoints;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:Amount = inputBodyRef.*:Amount;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:TotalPoints = inputBodyRef.*:TotalPoints;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:DelayAmount = inputBodyRef.*:DelayAmount;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:TotalAmount = inputBodyRef.*:TotalAmount;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:IsSuspended = inputBodyRef.*:IsSuspended;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:DelayPoints = inputBodyRef.*:DelayPoints;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:ExistingPoints = inputBodyRef.*:ExistingPoints;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:PenalityPointsforDelayCalculation = inputBodyRef.*:PenalityPointsforDelayCalculation;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:TotalAmountByTotalPoints = inputBodyRef.*:TotalAmountByTotalPoints;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:PenalityAmountForDelayCalculation = inputBodyRef.*:PenalityAmountForDelayCalculation;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:LatePaymetPenalityAmount = inputBodyRef.*:LatePaymetPenalityAmount;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:DriverName = inputBodyRef.*:DriverName;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:LicenseRegion = inputBodyRef.*:LicenseRegion;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:LicenseRegionDescription = inputBodyRef.*:LicenseRegionDescription;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:LicenseGrade = inputBodyRef.*:LicenseGrade;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:LicenseNo = inputBodyRef.*:LicenseNo;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:OrderNo = inputBodyRef.*:OrderNo;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:Location = inputBodyRef.*:Location;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:PaymentStatus = inputBodyRef.*:PaymentStatus;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:ActionTaken = inputBodyRef.*:ActionTaken;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:Longitude = inputBodyRef.*:Longitude;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:Latitude = inputBodyRef.*:Latitude;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:LocationName = inputBodyRef.*:LocationName;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:Telephone = inputBodyRef.*:Telephone;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:PlateRegion = inputBodyRef.*:PlateRegion;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:NewPlateCode = inputBodyRef.*:NewPlateCode;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:NewPlateNo = inputBodyRef.*:NewPlateNo;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:UserID = inputBodyRef.*:UserID;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:UserName = inputBodyRef.*:UserName;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:Main_guid = inputBodyRef.*:Main_guid;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:Parent_guid = inputBodyRef.*:Parent_guid;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:UtilAPIRetrievePenaltyResponse.*:Event_date = inputBodyRef.*:Event_date;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:Successful = inputRef.*:Successful;
		SET outputSoapRef.Body.*:RetrievePenaltyResponse.*:RetrievePenaltyResult.*:RetrievePenaltyResponse.*:Remarks = inputRef.*:Remarks;
		SET Environment.outputData = OutputRoot.SOAP;
		---------------------- Response Logging -------------------------
		MOVE domainDataRef TO OutputRoot.SOAP;
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		MOVE OutRef TO OutputRoot.XMLNSC;
		SET OutputRoot.SOAP = NULL;

		CALL PayloadLogging(envRef.id,Environment.reqPayload,'CHANNEL_RES',MessageFlowLabel,OutRef);

		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.HTTPResponseHeader = InputRoot.HTTPResponseHeader;
		SET OutputRoot.SOAP = Environment.outputData;

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -------- CHANNEL_RESP -------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'CHANNEL_RESP data is: '||Environment.resPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'**********************************************************************') INTO rc;

	END;
END MODULE;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE COMPUTE MODULE BuildExceptionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildExceptionResponse();
		RETURN TRUE;
	END;


	CREATE PROCEDURE BuildExceptionResponse() BEGIN
		CALL writeToLogFile(MessageFlowLabel, LOGGER_NAME,LOG_TYPE,'..............Error Logging Started...........') INTO rc;
		--DECLARE inRef REFERENCE TO InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment.Variables;
		DECLARE enRef REFERENCE TO Environment;
		DECLARE outRefer,outRef REFERENCE TO OutputRoot;
		--DECLARE encodeID INTEGER InputRoot.Properties.Encoding;
		--DECLARE ccsID INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputBody;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE excpPayload CHARACTER getPayLoad(domainName,domainDataRef,envRef.Encoding,envRef.CodedCharSetId);
		CREATE LASTCHILD OF Environment AS enRef DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF enRef AS enRef NAMESPACE 'soapenv' NAME 'Envelope';
		CREATE LASTCHILD OF enRef AS enRef NAMESPACE 'soapenv' NAME 'Body';
		CREATE LASTCHILD OF enRef AS enRef NAMESPACE 'esb' NAME ApplicationLabel;
		CALL BuildExceptionDetails(excpRef,enRef,ApplicationLabel);
		SET envRef.UserDefinedException = Environment.XMLNSC;
		MOVE domainDataRef TO Environment.XMLNSC;
		SET domainName = FIELDNAME(domainDataRef);
		DECLARE resPayload CHAR getPayLoad(domainName,domainDataRef,envRef.Encoding,envRef.CodedCharSetId);
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'Application Built Exception:'||resPayload) INTO rc;
		DECLARE inputRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'ExceptionDetails';
		DECLARE outExcpRef REFERENCE TO OutputRoot.XMLNSC.ExceptionDetails;
		SET outExcpRef.Msg_Id = envRef.id;
		SET outExcpRef.ExceptionType = inputRef.excpType;
		SET outExcpRef.ExceptionNumber = inputRef.excpNumber;
		SET outExcpRef.ExceptionLable = inputRef.excpLable;
		SET outExcpRef.ExceptionDescription = inputRef.excpText;
		SET outExcpRef.ActualExceptionText = inputRef.actualExcpText;
		SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = envRef.RequestIdentifier;
		CALL writeToLogFile(MessageFlowLabel, LOGGER_NAME,LOG_TYPE,'..............End of Error Logging ...........') INTO rc;

	END;
END MODULE;