BROKER SCHEMA com.dahenbank.SubmitACHTxn
path com.dashenbank.genericfunctions;
DECLARE rc BOOLEAN;
DECLARE LOG4J_CONFIG_PATH EXTERNAL CHARACTER'';
DECLARE LOG4J_ERROR_MSG EXTERNAL CHARACTER'';
DECLARE CBS_URL EXTERNAL CHARACTER'';
DECLARE DSN_NAME EXTERNAL CHARACTER'';

CREATE COMPUTE MODULE SubmitACHTxn_Esql
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG4J_CONFIG_PATH) INTO rc;
		IF (rc = TRUE) THEN
		-- CALL CopyMessageHeaders();
		  CALL AcknowledgementReport();
		  ELSE
			SET OutputRoot.SOAP.Body.Log.Message = LOG4J_ERROR_MSG;
		END IF;
		
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE AcknowledgementReport ( )
	BEGIN
		DECLARE msg_Id CHARACTER InputRoot.SOAP.Body.SubmitACHTxn.appcode;
	    SET Environment.id = msg_Id;
	    SET Environment.ccidRef = InputRoot.Properties.CodedCharSetId;
        SET Environment.encodeRef = InputRoot.Properties.Encoding;
	    SET Environment.domainDataRef = InputRoot.SOAP.Body;
	    SET Environment.domainName = FIELDNAME(InputBody); 
	    SET Environment.ReplyIdentifier = InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier;
	    
--	   DECLARE seqId INTEGER 1;
--		DECLARE TRANSACTION_STATUS1 CHARACTER 'Request Received from End User';
--		DECLARE CREATED_ON1 TIMESTAMP CURRENT_TIMESTAMP;
--		DECLARE CREATED_BY1 CHARACTER 'ACE USER';
--	   DECLARE serviceName CHARACTER 'SubmitACHTxn';
--	   DECLARE operationName CHARACTER ApplicationLabel;
--	   SET Environment.id[] = PASSTHRU('SELECT TRANSACTION_LOG_SEQ.NEXTVAL FROM DUAL');
--       SET seqId = CAST(Environment.id[1].NEXTVAL AS INTEGER);
--	   PASSTHRU 'INSERT INTO TRANSACTION_LOG VALUES(?,?,?,?,?,?,?)' TO Database.{DSN_NAME} VALUES(seqId,msg_Id,serviceName,operationName,TRANSACTION_STATUS1,CREATED_ON1,'ACE USER');
--	   COMMIT;

      DECLARE ccidRef INTEGER Environment.ccidRef;
      DECLARE encodeRef INTEGER Environment.encodeRef;
	  DECLARE domainDataRef REFERENCE TO InputRoot.SOAP.Body;
	  DECLARE domainName CHARACTER Environment.domainName; 
	  DECLARE payload CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
	  CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
	  DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
	  CALL PayloadLogging(msg_Id,payload,'CHANNEL_REQ',MessageFlowLabel,OutRef);
	    
	   CALL writeToLogFile(MessageFlowLabel,'submitAchTxnLogger','DEBUG','..........Request Received from END USER...........') INTO rc;
	   CALL writeToLogFile(MessageFlowLabel,'submitAchTxnLogger','DEBUG','CHANNEL_REQ data is: '||payload) INTO rc;
	   
	   SET OutputRoot.SOAP = InputRoot.SOAP;
       
--       DECLARE transactionStatus2 CHARACTER 'Request Sent to Backend flow';
--	   DECLARE createdBy2 TIMESTAMP CURRENT_TIMESTAMP;
--	   PASSTHRU 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE MSG_ID=?' TO Database.{DSN_NAME} VALUES(transactionStatus2,createdBy2,msg_Id);
--	   
	   DECLARE domainDataRef1 REFERENCE TO OutputRoot.SOAP.Body;
	   DECLARE domainName1 CHARACTER 'SOAP';
	   DECLARE payload1 CHARACTER getPayLoad(domainName1,domainDataRef1,encodeRef,ccidRef);
	   SET OutputRoot.SOAP = NULL;
	   CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
	   DECLARE OutRef1 REFERENCE TO OutputRoot.XMLNSC;
	   CALL PayloadLogging(msg_Id,payload1,'FLEXCUBE_REQ',MessageFlowLabel,OutRef1);
	   
	   SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = CBS_URL;
	   SET OutputRoot = InputRoot;

	   CALL writeToLogFile(MessageFlowLabel,'submitAchTxnLogger','DEBUG','FLEXCUBE_REQ data is: '||payload1) INTO rc;
	   CALL writeToLogFile(MessageFlowLabel,'submitAchTxnLogger','DEBUG','...............Request Sent to Backend flow..............') INTO rc;
	
	END;

END MODULE;

CREATE COMPUTE MODULE SubmitACHResponse_ESQL
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG4J_CONFIG_PATH) INTO rc;
		IF (rc = TRUE) THEN
			CALL SubmitACHResponse();
		ELSE
			SET OutputRoot.XMLNSC.Log.Message = LOG4J_ERROR_MSG;
		END IF;
		RETURN TRUE;
	END;	



	CREATE PROCEDURE SubmitACHResponse() BEGIN
		DECLARE inRef REFERENCE TO InputRoot.SOAP;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE payload CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET Environment.ReplyIdentifier = InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(Environment.id,payload,'FLEXCUBE_RESP',MessageFlowLabel,OutRef);

--		DECLARE TRANSACTION_STATUS CHARACTER 'Response Received from Backend flow';
--		DECLARE CREATED_ON TIMESTAMP CURRENT_TIMESTAMP;

--		PASSTHRU 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE MSG_ID=?' TO Database.{DSN_NAME}VALUES(TRANSACTION_STATUS,CREATED_ON,Environment.id);

		CALL writeToLogFile(MessageFlowLabel,'SubmitACHResponse','DEBUG',' ------------Response Received from Backend flow---------------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,'SubmitACHResponse','DEBUG','Response data is: '||payload) INTO rc;

		SET OutputRoot.SOAP=InputRoot.SOAP;

		DECLARE CH_TRANSACTION_STATUS CHARACTER 'Response Sent to END USER';
		DECLARE CH_CREATED_ON TIMESTAMP CURRENT_TIMESTAMP;

--		PASSTHRU 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE MSG_ID=?' TO Database.{DSN_NAME} VALUES(CH_TRANSACTION_STATUS,CH_CREATED_ON,Environment.id);	    


		DECLARE outDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE outDomainName CHARACTER 'XMLNSC';
		DECLARE outputData CHARACTER getPayLoad(outDomainName,outDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutputRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(Environment.id,outputData,'CHANNEL_RESP',MessageFlowLabel,OutputRef);
		CALL writeToLogFile(MessageFlowLabel,'SubmitACHResponse','DEBUG',' ------------Response Received from Backend flow---------------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,'SubmitACHResponse','DEBUG','Response data is: '||outputData) INTO rc;		


	END;
END MODULE;

CREATE COMPUTE MODULE BulidBusinessError_ESQL
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildExceptionResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE BuildExceptionResponse() BEGIN
		CALL writeToLogFile(MessageFlowLabel,'Exception_Logger' ,'DEBUG','..............Error Logging Started...........') INTO rc;
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		DECLARE envRef REFERENCE TO Environment;
		DECLARE outRefer,outRef REFERENCE TO OutputRoot;
		DECLARE encodeID INTEGER InputRoot.Properties.Encoding;
		DECLARE ccsID INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputRoot.XMLNSC;
--		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
--		DECLARE excpPayload CHARACTER getPayLoad(domainName,domainDataRef,encodeID,ccsID);
--		DECLARE CREATED_BY CHARACTER 'ACE USER';
--		CREATE LASTCHILD OF Environment AS envRef DOMAIN 'XMLNSC';
--		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Envelope';
--		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Body';
--		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'esb' NAME 'BulkFundTransfer';
--		CALL BuildExceptionDetails(excpRef,envRef,'BulkFundTransfer');
--		SET Environment.Variables.UserDefinedException = Environment.XMLNSC;
--		MOVE domainDataRef TO Environment.XMLNSC;
--		SET domainName = FIELDNAME(domainDataRef);
		DECLARE resPayload CHAR getPayLoad(domainName,domainDataRef,encodeID,ccsID);
		CALL writeToLogFile(MessageFlowLabel, 'Exception_Logger','DEBUG','Application Built Exception:'||resPayload) INTO rc;
		------------Error Logging in DB----------
--		CALL ConstructErrorDBLog(CURRENT_TIMESTAMP,CREATED_BY,envRef.ErrorType,MessageFlowLabel,ApplicationLabel,ExecutionGroupLabel,
--		excpPayload,Environment.REQUEST_PAYLOAD,excpRef.excpNumber,envRef.ErrorCode,outRef);
		----------------------------------
		SET OutputRoot.XMLNSC = Environment.XMLNSC;
		SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = Environment.Variables.RequestIdentifier;
		CALL writeToLogFile(MessageFlowLabel,'Exception_Logger','DEBUG','..............End of Error Logging ...........') INTO rc;
	END;
END MODULE;
