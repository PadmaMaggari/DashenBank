BROKER SCHEMA com.dahenbank.SubmitACHTxn
path com.dashenbank.genericfunctions;
DECLARE rc BOOLEAN;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER;
DECLARE LOG4J_ERROR_MSG EXTERNAL CHARACTER;
DECLARE BACKEND_URL EXTERNAL CHARACTER;
DECLARE DSN_NAME EXTERNAL CHARACTER;

CREATE COMPUTE MODULE SubmitACHTxn_Esql
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = TRUE) THEN
		-- CALL CopyMessageHeaders();
		  CALL AcknowledgementReport();
		  ELSE
			SET OutputRoot.SOAP.Body.Log.Message = LOG4J_ERROR_MSG;
		END IF;
		
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE AcknowledgementReport ( )
	BEGIN
		DECLARE msg_Id CHARACTER InputRoot.SOAP.Body.SubmitACHTxn.appcode;
	    SET Environment.id = msg_Id;
	    SET Environment.ccidRef = InputRoot.Properties.CodedCharSetId;
        SET Environment.encodeRef = InputRoot.Properties.Encoding;
	    SET Environment.domainDataRef = InputRoot.SOAP.Body;
	    SET Environment.domainName = FIELDNAME(InputBody); 
	    
--	   DECLARE seq_Id INTEGER;
--	   DECLARE transactionStatus1 CHARACTER 'Request Received from END USER';
--	   DECLARE createdOn1 TIMESTAMP CURRENT_TIMESTAMP;
--	   DECLARE serviceName CHARACTER 'SubmitACHTxn';
--	   DECLARE operationName CHARACTER ApplicationLabel;
--	   SET Environment.SEQ[] = PASSTHRU('SELECT TRANSACTION_LOG_SEQ.NEXTVAL FROM DUAL');
--       SET seq_Id = CAST(Environment.SEQ[1].NEXTVAL AS INTEGER);
--	   PASSTHRU 'INSERT INTO TRANSACTION_LOG VALUES(?,?,?,?,?,?,?)' TO Database.{DSN_NAME} VALUES(seq_Id,msg_Id,serviceName,operationName,transactionStatus1,createdOn1,'ACE USER');
--	   COMMIT;

      DECLARE ccidRef INTEGER Environment.ccidRef;
      DECLARE encodeRef INTEGER Environment.encodeRef;
	  DECLARE domainDataRef REFERENCE TO InputRoot.SOAP.Body;
	  DECLARE domainName CHARACTER Environment.domainName; 
	  DECLARE payload CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
	  CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
	  DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
	  CALL PayloadLogging(msg_Id,payload,'CHANNEL_REQ',MessageFlowLabel,OutRef);
	    
	   CALL writeToLogFile(MessageFlowLabel,'submitAchTxnLogger','DEBUG','..........Request Received from END USER...........') INTO rc;
	   CALL writeToLogFile(MessageFlowLabel,'submitAchTxnLogger','DEBUG','CHANNEL_REQ data is: '||payload) INTO rc;
	   
	   SET OutputRoot.SOAP = InputRoot.SOAP;
       
--       DECLARE transactionStatus2 CHARACTER 'Request Sent to Backend flow';
--	   DECLARE createdBy2 TIMESTAMP CURRENT_TIMESTAMP;
--	   PASSTHRU 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE MSG_ID=?' TO Database.{DSN_NAME} VALUES(transactionStatus2,createdBy2,msg_Id);
--	   
	   DECLARE domainDataRef1 REFERENCE TO OutputRoot.SOAP.Body;
	   DECLARE domainName1 CHARACTER 'SOAP';
	   DECLARE payload1 CHARACTER getPayLoad(domainName1,domainDataRef1,encodeRef,ccidRef);
	   SET OutputRoot.SOAP = NULL;
	   CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
	   DECLARE OutRef1 REFERENCE TO OutputRoot.XMLNSC;
	   CALL PayloadLogging(msg_Id,payload1,'FLEXCUBE_REQ',MessageFlowLabel,OutRef1);
	   
	   SET OutputRoot = InputRoot;
	   SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = BACKEND_URL;

	   CALL writeToLogFile(MessageFlowLabel,'submitAchTxnLogger','DEBUG','FLEXCUBE_REQ data is: '||payload1) INTO rc;
	   CALL writeToLogFile(MessageFlowLabel,'submitAchTxnLogger','DEBUG','...............Request Sent to Backend flow..............') INTO rc;
		

		
	END;
	
	

	
END MODULE;
