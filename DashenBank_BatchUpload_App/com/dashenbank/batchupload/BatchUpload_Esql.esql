BROKER SCHEMA com.dashenbank.batchupload
PATH com.dashenbank.genericfunctions;
DECLARE LOG4J_CONFIG_PATH, LOG4J_ERROR_MSG, BACKEND_URL, LOGGER_NAME, LOG_TYPE EXTERNAL CHARACTER;
DECLARE rc BOOLEAN;

CREATE COMPUTE MODULE RequestToFlexcube
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG4J_CONFIG_PATH) INTO rc;
		IF ( rc = TRUE ) THEN
			CALL GenerateReqToFlexcube();
		ELSE	
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_ERROR_MSG;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToFlexcube() BEGIN
		DECLARE msg_Id CHARACTER InputRoot.SOAP.Body.*:CREATEMJRNLBOOK_IOPK_REQ.*:FCUBS_HEADER.*:MSGID;
		SET Environment.id = msg_Id;
		SET Environment.ccidRef = InputRoot.Properties.CodedCharSetId;
		SET Environment.encodeRef = InputRoot.Properties.Encoding;
		SET Environment.domainDataRef = InputRoot.SOAP.Body;
		SET Environment.domainName = FIELDNAME(InputBody);
		
		DECLARE ccidRef INTEGER Environment.ccidRef;
		DECLARE encodeRef INTEGER Environment.encodeRef;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP.Body;
		DECLARE domainName CHARACTER Environment.domainName;
		DECLARE payload CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		
		CALL PayloadLogging(msg_Id,payload,'CHANNEL_REQ',MessageFlowLabel,OutRef);
		CALL writeToLogFile(MessageFlowLabel,'DriverlookupLogger','DEBUG','..........Request Received from END USER...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,'DriverlookupLogger','DEBUG','CHANNEL_REQ data is: '||payload) INTO rc;
		

		
	    
	    DECLARE domainDataRef1 REFERENCE TO OutputRoot.SOAP.Body;
		DECLARE domainName1 CHARACTER 'SOAP';
		DECLARE payload1 CHARACTER getPayLoad(domainName1,domainDataRef1,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef1 REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(msg_Id,payload1,'FLEXCUBE_REQ',MessageFlowLabel,OutRef1);

		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.SOAP = Environment.INSOAP;
		
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = BACKEND_URL;

		CALL writeToLogFile(MessageFlowLabel,'DriverlookupLogger','DEBUG','FLEXCUBE_REQ data is: '||payload1) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,'DriverlookupLogger','DEBUG','...............Request Sent to Backend flow..............') INTO rc;
		
	END;
END MODULE;

CREATE COMPUTE MODULE ResponseToFrontEnd
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	 CALL GenerateResToFrontEnd();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateResToFrontEnd() BEGIN
		DECLARE inRef REFERENCE TO InputRoot.SOAP;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE OPERATION_NAME,SERVICE_NAME CHAR;
		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
	--	SET TRANSACTION_STATUS = 'Response Received from Flexcube';
	--	SET CREATED_BY = 'ACE USER';
	--	SET OPERATION_NAME = inRef.FCUBS_HEADER.OPERATION;
	--	IF MSG_ID IS NULL OR MSG_ID = '' THEN
	--	SET MSG_ID = Environment.MSG_ID;
	--	END IF;
	--	SET SERVICE_NAME = inRef.FCUBS_HEADER.SERVICE;

		----------------------Request Logging-------------------------
		--INSERT INTO Database.TRANSACTION_LOG(SEQ_ID,MSG_ID,SERVICE_NAME,OPERATION_NAME,TRANSACTION_STATUS,CREATED_ON,CREATED_BY) 
		--VALUES(SEQ_ID.NEXTVAL,MSG_ID,SERVICE_NAME,OPERATION_NAME,TRANSACTION_STATUS,CREATED_ON,CREATED_BY);
	--	PASSTHRU 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE MSG_ID=?' TO Database.DBDSN 
	--	VALUES(TRANSACTION_STATUS,CURRENT_TIMESTAMP,MSG_ID);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging('MSG_ID',Environment.reqPayload,'FLEXCUBE_RES',MessageFlowLabel,OutRef);
		CALL writeToLogFile(MessageFlowLabel,'LOGGER_NAME','LOG_TYPE',' ------ Response Received from Flexcube ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,'LOGGER_NAME','LOG_TYPE','Response data is: '||Environment.reqPayload) INTO rc;
		----------------------------------------------------
		
		-------------Business Logic-------------------------
		CALL writeToLogFile(MessageFlowLabel,'LOGGER_NAME','LOG_TYPE',' ------ Preparing Business Logic ------') INTO rc;
	   	SET OutputRoot.SOAP = InputRoot.SOAP;
	    SET OutputRoot.SOAP.Body.*:Header.REQ_IDENTIFIER = 'MSG_ID';
		----------------------------------------------------
		
		----------------------Response Logging-------------------------
	--	SET TRANSACTION_STATUS = 'Response Sent to Frontend';
	--	SET CREATED_ON = CURRENT_TIMESTAMP;
		MOVE domainDataRef TO OutputRoot.SOAP;
		SET domainName = FIELDNAME(domainDataRef);
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		MOVE OutRef TO OutputRoot.XMLNSC;
	--	PASSTHRU 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE MSG_ID=?' TO Database.DBDSN 
	--	VALUES(TRANSACTION_STATUS,CURRENT_TIMESTAMP,MSG_ID);
		CALL PayloadLogging('MSG_ID',Environment.reqPayload,'CHANNEL_RES',MessageFlowLabel,OutRef);
		CALL writeToLogFile(MessageFlowLabel,'LOGGER_NAME','LOG_TYPE',' ------ Response to Frontend------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,'LOGGER_NAME','LOG_TYPE','Response data is: '||Environment.resPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,'LOGGER_NAME','LOG_TYPE','End of Batch Upload') INTO rc;
		---------------------------------------------------------------
	END;
END MODULE;


CREATE COMPUTE MODULE BuildExceptionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL Build_BusinessErrorResponse();
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE Build_BusinessErrorResponse() BEGIN
		CALL writeToLogFile(MessageFlowLabel, 'LOGGER_NAME','LOG_TYPE','..............Error Logging Started...........') INTO rc;
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		DECLARE envRef REFERENCE TO Environment;
		DECLARE outRefer,outRef REFERENCE TO OutputRoot;
		DECLARE encodeID INTEGER InputRoot.Properties.Encoding;
		DECLARE ccsID INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputBody;
		--DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		--DECLARE excpPayload CHARACTER getPayLoad(domainName,domainDataRef,encodeID,ccsID);
		--CREATE LASTCHILD OF Environment AS envRef DOMAIN 'XMLNSC';
		---CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Envelope';
		--CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Body';
		--CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'esb' NAME 'BatchUpload';
		--CALL BuildExceptionDetails(excpRef,envRef,'BatchUpload');
		--SET Environment.Variables.UserDefinedException = Environment.XMLNSC;
		--MOVE domainDataRef TO Environment.XMLNSC;
		--SET domainName = FIELDNAME(domainDataRef);
		DECLARE resPayload CHAR getPayLoad(domainName,domainDataRef,encodeID,ccsID);
		CALL writeToLogFile(MessageFlowLabel, 'LOGGER_NAME','LOG_TYPE','Application Built Exception:'||resPayload) INTO rc;
		------------Error  Logging in DB----------
		--CALL ConstructErrorDBLog(CURRENT_TIMESTAMP,CREATED_BY,envRef.ErrorType,MessageFlowLabel,ApplicationLabel,ExecutionGroupLabel,
		---excpPayload,Environment.REQUEST_PAYLOAD,excpRef.excpNumber,envRef.ErrorCode,outRef);
		-------------------------------------------
		SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
		SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = Environment.Variables.RequestIdentifier;
		CALL writeToLogFile(MessageFlowLabel,' LOGGER_NAME','LOG_TYPE','..............End of Error Logging ...........') INTO rc;
	END;
END MODULE;