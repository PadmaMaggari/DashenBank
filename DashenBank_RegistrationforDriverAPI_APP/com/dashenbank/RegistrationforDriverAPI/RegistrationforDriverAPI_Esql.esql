

BROKER SCHEMA com.dashenbank.RegistrationforDriverAPI

PATH com.dashenbank.genericfunctions;
--DECLARE bloc NAMESPACE 'http://www.example.org/BlockingAmount/';
DECLARE LOG4J_CONFIG_PATH, LOG4J_ERROR_MSG, BACKEND_URL, LOGGER_NAME, LOG_TYPE EXTERNAL CHARACTER;
DECLARE rc BOOLEAN TRUE;
CREATE COMPUTE MODULE RequestToBackend
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG4J_CONFIG_PATH) INTO rc;
		IF (rc = TRUE) THEN
			CALL request_from_channnel();
		ELSE
			SET OutputRoot.XMLNSC.Log.Message = LOG4J_ERROR_MSG;
		END IF;
		RETURN TRUE;
	END;
	CREATE PROCEDURE request_from_channnel() BEGIN
		SET Environment.domainDataRef = InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment.Variables;
		CREATE LASTCHILD OF Environment AS envRef NAME 'Variables';

		SET Environment.domainDataRef = InputRoot.SOAP;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		SET envRef.Encoding = encodeRef;
		SET envRef.CodedCharSetId = ccidRef;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);

		SET envRef.RequestIdentifier = CAST(InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier AS CHARACTER);
		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		DECLARE inRef REFERENCE TO InputRoot.SOAP.*:Body.*:QUERYACCSUMM_IOFS_REQ;
		SET envRef.id = InputRoot.SOAP.Body.*:RegisterDriver.*:providerID;
		---------------------- Request Logging -------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(envRef.id,Environment.reqPayload,'CHANNEL_REQ',ApplicationLabel,OutRef);

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ CHANNEL_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'CHANNEL_REQ data is: '||Environment.reqPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -----------------------------------------------------------------------') INTO rc;
		----------------- Generating request to flexcube ----------------
		DECLARE inputBodyref REFERENCE TO InputRoot.SOAP.Body.*:RegisterDriver;
		DECLARE inBodyref REFERENCE TO InputRoot.SOAP.Body.*:RegisterDriver.*:RegisterDriverRequest;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outputbodyRef REFERENCE TO OutputRoot.SOAP;

		SET outputbodyRef.Body.*:RegisterDriver.*:providerID = inputBodyref.*:providerID;
		SET outputbodyRef.Body.*:RegisterDriver.*:appcode = inputBodyref.*:appcode;
		SET outputbodyRef.Body.*:RegisterDriver.*:apppassphrase = inputBodyref.*:apppassphrase;
		SET outputbodyRef.Body.*:RegisterDriver.*:token = inputBodyref.*:token;
		SET outputbodyRef.Body.*:RegisterDriver.*:licenseNumber = inputBodyref.*:licenseNumber;
		SET outputbodyRef.Body.*:RegisterDriver.*:RegisterDriverRequest.*:FirstNameAmh = inBodyref.*:FirstNameAmh;
		SET outputbodyRef.Body.*:RegisterDriver.*:RegisterDriverRequest.*:FatherNameAmh = inBodyref.*:FatherNameAmh;
		SET outputbodyRef.Body.*:RegisterDriver.*:RegisterDriverRequest.*:GrandNameAmh = inBodyref.*:GrandNameAmh;
		SET outputbodyRef.Body.*:RegisterDriver.*:RegisterDriverRequest.*:FirstName = inBodyref.*:FirstName;
		SET outputbodyRef.Body.*:RegisterDriver.*:RegisterDriverRequest.*:FatherName = inBodyref.*:FatherName;
		SET outputbodyRef.Body.*:RegisterDriver.*:RegisterDriverRequest.*:GrandName = inBodyref.*:GrandName;
		SET outputbodyRef.Body.*:RegisterDriver.*:RegisterDriverRequest.*:Sex = inBodyref.*:Sex;
		SET outputbodyRef.Body.*:RegisterDriver.*:RegisterDriverRequest.*:BirthDate = inBodyref.*:BirthDate;
		SET outputbodyRef.Body.*:RegisterDriver.*:RegisterDriverRequest.*:LicenseRegion = inBodyref.*:LicenseRegion;
		SET outputbodyRef.Body.*:RegisterDriver.*:RegisterDriverRequest.*:LicenseArea = inBodyref.*:LicenseArea;
		SET outputbodyRef.Body.*:RegisterDriver.*:RegisterDriverRequest.*:LicenseGrade = inBodyref.*:LicenseGrade;
		SET outputbodyRef.Body.*:RegisterDriver.*:RegisterDriverRequest.*:LicenseNo = inBodyref.*:LicenseNo;
		SET outputbodyRef.Body.*:RegisterDriver.*:RegisterDriverRequest.*:IssuanceDate = inBodyref.*:IssuanceDate;
		SET Environment.outputData = OutputRoot.SOAP;
		---------------------- Response Logging -------------------------
		MOVE domainDataRef TO OutputRoot.SOAP;
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		MOVE OutRef TO OutputRoot.XMLNSC;
		CALL PayloadLogging(envRef.id,Environment.resPayload,'BACKEND_REQ',ApplicationLabel,OutRef);

		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.SOAP = Environment.outputData;

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ BACKEND_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'BACKEND_REQ data is: '||Environment.resPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -------------------------------------------------------------------------') INTO rc;

		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = BACKEND_URL;
	END;
END MODULE;
---------------------------------------------------------------------------------------------------------------------

CREATE COMPUTE MODULE ResponseToChannel
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL response_from_Backend();
		RETURN TRUE;
	END;
	CREATE PROCEDURE response_from_Backend() BEGIN
		SET Environment.domainDataRef = InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment.Variables;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);

		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		---------------------- Request Logging -------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(envRef.id,Environment.reqPayload,'FLEXCUBE_RES',ApplicationLabel,OutRef);

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------- FLEXCUBE_RESP -------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'FLEXCUBE_RESP data is: '||Environment.reqPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ----------------------------------------------------------------------') INTO rc;
		--------------- generating response to channel ---------------

		DECLARE inputBodyref REFERENCE TO InputRoot.SOAP.Body.*:RegisterDriverResponse.*:RegisterDriverResult.*:RegisterDriverResponse;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outputbodyRef REFERENCE TO OutputRoot.SOAP;

		SET outputbodyRef.Body.*:RegisterDriverResponse.*:RegisterDriverResult.*:RegisterDriverResponse.*:UtilAPIRegisterDriverResponse.*:IsSuccess = inputBodyref.*:UtilAPIRegisterDriverResponse.*:IsSuccess;
		SET outputbodyRef.Body.*:RegisterDriverResponse.*:RegisterDriverResult.*:RegisterDriverResponse.*:UtilAPIRegisterDriverResponse.*:ErrorCode = inputBodyref.*:UtilAPIRegisterDriverResponse.*:ErrorCode;
		SET outputbodyRef.Body.*:RegisterDriverResponse.*:RegisterDriverResult.*:RegisterDriverResponse.*:UtilAPIRegisterDriverResponse.*:ErrorMessage = inputBodyref.*:UtilAPIRegisterDriverResponse.*:ErrorMessage;
		SET outputbodyRef.Body.*:RegisterDriverResponse.*:RegisterDriverResult.*:RegisterDriverResponse.*:Successful = inputBodyref.*:Successful;
		SET outputbodyRef.Body.*:RegisterDriverResponse.*:RegisterDriverResult.*:RegisterDriverResponse.*:Remarks = inputBodyref.*:Remarks;

		SET Environment.outputData = OutputRoot.SOAP;
		----------------------Response Logging-------------------------
		MOVE domainDataRef TO OutputRoot.SOAP;
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		MOVE OutRef TO OutputRoot.XMLNSC;
		SET OutputRoot.SOAP = NULL;

		CALL PayloadLogging(envRef.id,Environment.reqPayload,'CHANNEL_RES',MessageFlowLabel,OutRef);

		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.HTTPResponseHeader = InputRoot.HTTPResponseHeader;
		SET OutputRoot.SOAP = Environment.outputData;

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -------- CHANNEL_RESP -------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'CHANNEL_RESP data is: '||Environment.resPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'**********************************************************************') INTO rc;
	END;
END MODULE;
-----------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE BuildExceptionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildExceptionResponse();
		RETURN TRUE;
	END;
	CREATE PROCEDURE BuildExceptionResponse() BEGIN
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'..............Error Logging Started...........') INTO rc;
		--DECLARE inRef REFERENCE TO InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment.Variables;
		DECLARE enRef REFERENCE TO Environment;
		DECLARE outRefer,outRef REFERENCE TO OutputRoot;
		--DECLARE encodeID INTEGER InputRoot.Properties.Encoding;
		--DECLARE ccsID INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputBody;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE excpPayload CHARACTER getPayLoad(domainName,domainDataRef,envRef.Encoding,envRef.CodedCharSetId);
		CREATE LASTCHILD OF Environment AS enRef DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF enRef AS enRef NAMESPACE 'soapenv' NAME 'Envelope';
		CREATE LASTCHILD OF enRef AS enRef NAMESPACE 'soapenv' NAME 'Body';
		CREATE LASTCHILD OF enRef AS enRef NAMESPACE 'esb' NAME ApplicationLabel;
		CALL BuildExceptionDetails(excpRef,enRef,ApplicationLabel);
		SET envRef.UserDefinedException = Environment.XMLNSC;
		MOVE domainDataRef TO Environment.XMLNSC;
		SET domainName = FIELDNAME(domainDataRef);
		DECLARE resPayload CHAR getPayLoad(domainName,domainDataRef,envRef.Encoding,envRef.CodedCharSetId);
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'Application Built Exception:'||resPayload) INTO rc;
		DECLARE inputRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'ExceptionDetails';
		DECLARE outExcpRef REFERENCE TO OutputRoot.XMLNSC.ExceptionDetails;
		SET outExcpRef.Msg_Id = envRef.id;
		SET outExcpRef.ExceptionType = inputRef.excpType;
		SET outExcpRef.ExceptionNumber = inputRef.excpNumber;
		SET outExcpRef.ExceptionLable = inputRef.excpLable;
		SET outExcpRef.ExceptionDescription = inputRef.excpText;
		SET outExcpRef.ActualExceptionText = inputRef.actualExcpText;

		SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = envRef.RequestIdentifier;
		CALL writeToLogFile(MessageFlowLabel, LOGGER_NAME,LOG_TYPE,'..............End of Error Logging ...........') INTO rc;
	END;
END MODULE;