

BROKER SCHEMA com.dashenbank.BillEnquiry
path com.dashenbank.genericfunctions;

DECLARE rc BOOLEAN;
DECLARE LOG4J_CONFIG_PATH EXTERNAL CHARACTER '' ;
DECLARE LOG4J_ERROR_MSG EXTERNAL CHARACTER'';
DECLARE CBS_URL EXTERNAL CHARACTER '';
DECLARE DSN_NAME EXTERNAL CHARACTER '';


CREATE COMPUTE MODULE BillEnquiry_Flow_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
BEGIN
		CALL initLog4j(LOG4J_CONFIG_PATH) INTO rc;
		IF (rc = TRUE) THEN
			CALL BillEnquiry();
		ELSE
			SET OutputRoot.XMLNSC.Log.Message = LOG4J_ERROR_MSG;
		END IF;

		RETURN TRUE;
		END;
		create PROCEDURE BillEnquiry( )
		BEGIN
			DECLARE id CHARACTER InputRoot.SOAP.Body.BillEnquiry.Serviceid;
			SET Environment.id = id;
			SET Environment.ccidRef = InputRoot.Properties.CodedCharSetId;
			SET Environment.encodeRef = InputRoot.Properties.Encoding;
			SET Environment.domainName = FIELDNAME(InputBody);
			SET Environment.ReplyIdentifier = InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier;

			DECLARE seqId INTEGER 1;
			DECLARE TRANSACTION_STATUS1 CHARACTER 'Request Received from End User';
			DECLARE CREATED_ON1 TIMESTAMP CURRENT_TIMESTAMP;
			DECLARE CREATED_BY1 CHARACTER 'ACE USER';
			DECLARE OPERATION_NAME CHARACTER InputRoot.SOAP.Body.BillEnquiry.ServiceName;
			DECLARE SERVICE_NAME CHARACTER ApplicationLabel;
			SET Environment.id[] = PASSTHRU('SELECT TRANSACTION_LOG_SEQ.NEXTVAL FROM DUAL');
			SET seqId = CAST(Environment.id[1].NEXTVAL AS INTEGER);
			INSERT INTO Database.{DSN_NAME}.system.TRANSACTION_LOG(SEQ_ID,MSG_ID,SERVICE_NAME,OPERATION_NAME,TRANSACTION_STATUS,CREATED_ON,CREATED_BY) VALUES(seqId.NEXTVAL,id,SERVICE_NAME,OPERATION_NAME,TRANSACTION_STATUS1,CREATED_ON1,CREATED_BY1);
			commit;
			DECLARE ccidRef INTEGER Environment.ccidRef;
			DECLARE encodeRef INTEGER Environment.encodeRef;
			DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
			DECLARE domainName CHARACTER Environment.domainName;
			DECLARE payload CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
			CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
			DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
			CALL PayloadLogging(id,payload,'CHANNEL_REQ',MessageFlowLabel,OutRef);
			-- CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'Request data is: '|| payload) INTO rc;
			CALL writeToLogFile(MessageFlowLabel,'BillEnquiryLogger','DEBUG','Request data is: ') INTO rc;
			SET OutputRoot.SOAP = InputRoot.SOAP;
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = CBS_URL;


			DECLARE TRANSACTION_STATUS2 CHARACTER 'Request Sent to bankend flow';
			DECLARE CREATED_ON2 TIMESTAMP CURRENT_TIMESTAMP;
			PASSTHRU 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE MSG_ID=?' TO Database.{DSN_NAME}VALUES(TRANSACTION_STATUS2,CREATED_ON2,id);

			DECLARE domainDataRef1 REFERENCE TO OutputRoot.SOAP.Body;
			DECLARE domainName1 CHARACTER 'SOAP';
			DECLARE LOG4 CHARACTER getPayLoad(domainName1,domainDataRef1,encodeRef,ccidRef);
			CALL writeToLogFile(MessageFlowLabel,'BillEnquiryLogger','DEBUG','Request data is: '||LOG4) INTO rc;

			CALL writeToLogFile(MessageFlowLabel,'BillEnquiryLogger','DEBUG','..........Request Sent to Backendflow...........') INTO rc;

	END;
END MODULE;
CREATE COMPUTE MODULE BillEnquiryFlowResponse_ESQL
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG4J_CONFIG_PATH) INTO rc;
		IF (rc = TRUE) THEN
			CALL BillEnquiryFlowResponse();
		ELSE
			SET OutputRoot.XMLNSC.Log.Message = LOG4J_ERROR_MSG;
		END IF;
		RETURN TRUE;
	END;	



	CREATE PROCEDURE BillEnquiryFlowResponse() BEGIN
		DECLARE inRef REFERENCE TO InputRoot.SOAP;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE payload CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET Environment.ReplyIdentifier = InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(Environment.id,payload,'FLEXCUBE_RESP',MessageFlowLabel,OutRef);

		DECLARE TRANSACTION_STATUS CHARACTER 'Response Received from Backend flow';
		DECLARE CREATED_ON TIMESTAMP CURRENT_TIMESTAMP;

		PASSTHRU 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE MSG_ID=?' TO Database.{DSN_NAME}VALUES(TRANSACTION_STATUS,CREATED_ON,Environment.id);

		CALL writeToLogFile(MessageFlowLabel,'BillEnquiryResponse','DEBUG',' ------------Response Received from Backend flow---------------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,'BillEnquiryResponse','DEBUG','Response data is: '||payload) INTO rc;

		SET OutputRoot.SOAP=InputRoot.SOAP;

		DECLARE CH_TRANSACTION_STATUS CHARACTER 'Response Sent to END USER';
		DECLARE CH_CREATED_ON TIMESTAMP CURRENT_TIMESTAMP;

		PASSTHRU 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE MSG_ID=?' TO Database.{DSN_NAME} VALUES(CH_TRANSACTION_STATUS,CH_CREATED_ON,Environment.id);	    


		DECLARE outDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE outDomainName CHARACTER 'XMLNSC';
		DECLARE outputData CHARACTER getPayLoad(outDomainName,outDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutputRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(Environment.id,outputData,'CHANNEL_RESP',MessageFlowLabel,OutputRef);
		CALL writeToLogFile(MessageFlowLabel,'BillEnquiryResponse','DEBUG',' ------------Response Received from Backend flow---------------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,'BillEnquiryResponse','DEBUG','Response data is: '||outputData) INTO rc;		


	END;
END MODULE;

CREATE COMPUTE MODULE BulidBusinessError_ESQL
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildExceptionResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE BuildExceptionResponse() BEGIN
		CALL writeToLogFile(MessageFlowLabel,'Exception_Logger' ,'DEBUG','..............Error Logging Started...........') INTO rc;
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		DECLARE envRef REFERENCE TO Environment;
		DECLARE outRefer,outRef REFERENCE TO OutputRoot;
		DECLARE encodeID INTEGER InputRoot.Properties.Encoding;
		DECLARE ccsID INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputRoot.XMLNSC;
--		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
--		DECLARE excpPayload CHARACTER getPayLoad(domainName,domainDataRef,encodeID,ccsID);
--		DECLARE CREATED_BY CHARACTER 'ACE USER';
--		CREATE LASTCHILD OF Environment AS envRef DOMAIN 'XMLNSC';
--		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Envelope';
--		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Body';
--		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'esb' NAME 'BulkFundTransfer';
--		CALL BuildExceptionDetails(excpRef,envRef,'BulkFundTransfer');
--		SET Environment.Variables.UserDefinedException = Environment.XMLNSC;
--		MOVE domainDataRef TO Environment.XMLNSC;
--		SET domainName = FIELDNAME(domainDataRef);
		DECLARE resPayload CHAR getPayLoad(domainName,domainDataRef,encodeID,ccsID);
		CALL writeToLogFile(MessageFlowLabel, 'Exception_Logger','DEBUG','Application Built Exception:'||resPayload) INTO rc;
		------------Error Logging in DB----------
--		CALL ConstructErrorDBLog(CURRENT_TIMESTAMP,CREATED_BY,envRef.ErrorType,MessageFlowLabel,ApplicationLabel,ExecutionGroupLabel,
--		excpPayload,Environment.REQUEST_PAYLOAD,excpRef.excpNumber,envRef.ErrorCode,outRef);
		----------------------------------
		SET OutputRoot.XMLNSC = Environment.XMLNSC;
		SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = Environment.Variables.RequestIdentifier;
		CALL writeToLogFile(MessageFlowLabel,'Exception_Logger','DEBUG','..............End of Error Logging ...........') INTO rc;
	END;
END MODULE;