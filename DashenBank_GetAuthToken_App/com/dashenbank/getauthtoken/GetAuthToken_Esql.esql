



BROKER SCHEMA com.dashenbank.getauthtoken
PATH com.dashenbank.genericfunctions;
DECLARE ns NAMESPACE 'http://www.example.org/GetAuthToken/';
DECLARE soapenv NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
DECLARE esb NAMESPACE 'http://www.dashenbank.org/ESB_GetAuthTokenService/';

DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER;
DECLARE LOG4J_ERROR_MSG EXTERNAL CHARACTER;
DECLARE BACKEND_URL EXTERNAL CHARACTER;
DECLARE LOGGER_NAME EXTERNAL CHARACTER;
DECLARE LOG_TYPE EXTERNAL CHARACTER;
--------Global Variables----------
DECLARE rc BOOLEAN FALSE;

CREATE COMPUTE MODULE RequestToFlexcube
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = TRUE) THEN
			CALL request_from_channnel();
		ELSE
			SET OutputRoot.SOAP.Body.Log.Message = LOG4J_ERROR_MSG;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE request_from_channnel() BEGIN

		DECLARE msgId CHARACTER InputRoot.SOAP.Body.*:GetAuthToken.*:providerID;
		SET Environment.id = msgId;
		SET Environment.Variables.Encoding = InputRoot.Properties.Encoding;
		SET Environment.Variables.CodedCharSetId = InputRoot.Properties.CodedCharSetId;
		SET Environment.domainDataRef = InputRoot.SOAP;
		SET Environment.RequestIdentifier = InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier;

		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		------------------- Request Logging -------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(msgId,Environment.reqPayload,'CHANNEL_REQ',ApplicationLabel,OutRef);

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ CHANNEL_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'CHANNEL_REQ data is: '||Environment.reqPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -----------------------------------------------------------------------') INTO rc;
		------------------- Generating request to flexcube ---------------------
		DECLARE inputBodyRef REFERENCE To InputRoot.SOAP.Body.*:GetAuthToken;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outputSoapRef REFERENCE TO OutputRoot.SOAP;
		SET outputSoapRef.Body.*:GetAuthToken.*:providerID = inputBodyRef.*:providerID;
		SET outputSoapRef.Body.*:GetAuthToken.*:appcode = inputBodyRef.*:appcode;
		SET outputSoapRef.Body.*:GetAuthToken.*:apppassphrase = inputBodyRef.*:apppassphrase;
		SET Environment.outputData = OutputRoot.SOAP;
		---------------------- Response Logging -------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE outRefData REFERENCE TO OutputRoot.XMLNSC;
		MOVE domainDataRef TO OutputRoot.SOAP;
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		CALL PayloadLogging(msgId,Environment.resPayload,'FLEXCUBE_REQ',ApplicationLabel,outRefData);

		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.SOAP = Environment.outputData;

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ FLEXCUBE_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'FLEXCUBE_REQ data is: '||Environment.resPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -----------------------------------------------------------------------') INTO rc;

		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = BACKEND_URL;


	END;
END MODULE;

CREATE COMPUTE MODULE ResponseToFrontEnd
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL response_from_flexcube();
		RETURN TRUE;
	END;

	CREATE PROCEDURE response_from_flexcube() BEGIN
		SET Environment.domainDataRef = InputRoot.SOAP;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.reqPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		---------------------- Request Logging -------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(Environment.id,Environment.reqPayload,'FLEXCUBE_RES',ApplicationLabel,OutRef);

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------- FLEXCUBE_RESP -------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'FLEXCUBE_RESP data  is: '||Environment.reqPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ----------------------------------------------------------------------') INTO rc;
		------------------ generating response to channel ---------------
		DECLARE inputBodyRef REFERENCE To InputRoot.SOAP.Body.*:GetAuthTokenResponse.*:GetAuthTokenResult.*:GetAuthTokenResponse.*:UtilAPIGetAuthTokenResponse;
		DECLARE inputRef REFERENCE To InputRoot.SOAP.Body.*:GetAuthTokenResponse.*:GetAuthTokenResult.*:GetAuthTokenResponse;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outputSoapRef REFERENCE TO OutputRoot.SOAP;
		SET outputSoapRef.Body.*:GetAuthTokenResponse.*:GetAuthTokenResult.*:GetAuthTokenResponse.*:UtilAPIGetAuthTokenResponse.*:Token = inputBodyRef.*:Token;
		SET outputSoapRef.Body.*:GetAuthTokenResponse.*:GetAuthTokenResult.*:GetAuthTokenResponse.*:Successful = inputRef.*:Successful;
		SET outputSoapRef.Body.*:GetAuthTokenResponse.*:GetAuthTokenResult.*:GetAuthTokenResponse.*:Remarks = inputRef.*:Remarks;
		SET Environment.outputData = OutputRoot.SOAP;
		---------------------- Response Logging -------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE outputRef REFERENCE TO OutputRoot.XMLNSC;
		MOVE domainDataRef TO OutputRoot.SOAP;
		SET Environment.resPayload = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		CALL PayloadLogging(Environment.id,Environment.resPayload,'CHANNEL_RES',ApplicationLabel,outputRef);

		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.HTTPResponseHeader = InputRoot.HTTPResponseHeader;
		SET OutputRoot.SOAP = Environment.outputData;

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -------- CHANNEL_RESP -------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'CHANNEL_RESP data is: '||Environment.resPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'**********************************************************************') INTO rc;
	END;
END MODULE;


CREATE COMPUTE MODULE BuildExceptionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL Build_BusinessErrorResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE Build_BusinessErrorResponse() BEGIN
		CALL writeToLogFile(MessageFlowLabel, LOGGER_NAME,LOG_TYPE,'..............Error Logging Started...........') INTO rc;
		--DECLARE inRef REFERENCE TO InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment;
		DECLARE outRefer,outRef REFERENCE TO OutputRoot;
		--DECLARE encodeID INTEGER InputRoot.Properties.Encoding;
		--DECLARE ccsID INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputBody;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE excpPayload CHARACTER getPayLoad(domainName,domainDataRef,Environment.Variables.Encoding,Environment.Variables.CodedCharSetId);
		CREATE LASTCHILD OF Environment AS envRef DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Envelope';
		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Body';
		CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'esb' NAME ApplicationLabel;
		CALL BuildExceptionDetails(excpRef,envRef,ApplicationLabel);
		SET Environment.Variables.UserDefinedException = Environment.XMLNSC;
		MOVE domainDataRef TO Environment.XMLNSC;
		SET domainName = FIELDNAME(domainDataRef);
		DECLARE resPayload CHAR getPayLoad(domainName,domainDataRef,Environment.Variables.Encoding,Environment.Variables.CodedCharSetId);
		CALL writeToLogFile(MessageFlowLabel, LOGGER_NAME,LOG_TYPE,'Application Built Exception:'||resPayload) INTO rc;
		------------Error Logging in DB----------
		--CALL ConstructErrorDBLog(CURRENT_TIMESTAMP,CREATED_BY,envRef.ErrorType,MessageFlowLabel,ApplicationLabel,ExecutionGroupLabel,
		---excpPayload,Environment.REQUEST_PAYLOAD,excpRef.excpNumber,envRef.ErrorCode,outRef);
		-----------------------------------------
		SET OutputRoot.XMLNSC.ExceptionDetails.Msg_Id = Environment.id;
		SET OutputRoot.XMLNSC.ExceptionDetails.ExceptionType = InputRoot.XMLNSC.ExceptionDetails.excpType;
		SET OutputRoot.XMLNSC.ExceptionDetails.ExceptionNumber = InputRoot.XMLNSC.ExceptionDetails.excpNumber;
		SET OutputRoot.XMLNSC.ExceptionDetails.ExceptionLable = InputRoot.XMLNSC.ExceptionDetails.excpLable;
		SET OutputRoot.XMLNSC.ExceptionDetails.ExceptionDescription = InputRoot.XMLNSC.ExceptionDetails.excpText;
		SET OutputRoot.XMLNSC.ExceptionDetails.ActualExceptionText = InputRoot.XMLNSC.ExceptionDetails.actualExcpText;
		--SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = Environment.Variables.RequestIdentifier;
		CALL writeToLogFile(MessageFlowLabel, LOGGER_NAME,LOG_TYPE,'..............End of Error Logging ...........') INTO rc;

	END;
END MODULE;