

BROKER SCHEMA com.dashenbank.Unfreeze

PATH com.dashenbank.genericfunctions;
DECLARE ns NAMESPACE 'http://www.example.org/FCUBSCustomerService/';
DECLARE rc BOOLEAN;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER;
DECLARE LOG4J_ERROR_MSG EXTERNAL CHARACTER;
DECLARE CBS_URL EXTERNAL CHARACTER;
--DECLARE DSN_NAME EXTERNAL CHARACTER;

CREATE COMPUTE MODULE RequestToBackend
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = TRUE) THEN
			CALL CloseAmtBlk();
		ELSE
			SET OutputRoot.SOAP.Body.Log.Message = LOG4J_ERROR_MSG;
		END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CloseAmtBlk() BEGIN
		-- DECLARE id CHARACTER InputRoot.HTTPInputHeader."Content-Type";
		DECLARE msgid CHARACTER InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier;
		SET Environment.id = msgid;
		SET Environment.ccidRef = InputRoot.Properties.CodedCharSetId;
		SET Environment.encodeRef = InputRoot.Properties.Encoding;
		SET Environment.domainDataRef = InputRoot.SOAP.Body;
		SET Environment.domainName = FIELDNAME(InputBody);
		DECLARE ccidRef INTEGER Environment.ccidRef;
		DECLARE encodeRef INTEGER Environment.encodeRef;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP.Body;
		DECLARE domainName CHARACTER Environment.domainName;
		DECLARE payload CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		
			set OutputRoot.SOAP.Body.ns:CLOSEAMTBLK_FSFS=InputRoot.SOAP.Body.ns:CLOSEAMTBLK_FSFS;
		DECLARE id1,SEQ_ID INTEGER;
		DECLARE TRANSACTION_STATUS CHARACTER 'Request Sent to CBS Flow';
		---DECLARE CREATED_ON TIMESTAMP CURRENT_TIMESTAMP;
		--DECLARE CREATED_BY CHARACTER 'ACE USER';
		DECLARE SERVICE_NAME CHARACTER InputRoot.SOAP.Body.ns:CLOSEAMTBLK_FSFS.Unblocking_HEADER.SERVICE;
		DECLARE OPERATION_NAME CHARACTER InputRoot.SOAP.Body.ns:CLOSEAMTBLK_FSFS.Unblocking_HEADER.OPERATION;
		
		SET Environment.ID[] = PASSTHRU('SELECT TRANSACTION_LOG_SEQ.NEXTVAL FROM DUAL');
		SET SEQ_ID = CAST(Environment.ID[1].NEXTVAL AS INTEGER);
		PASSTHRU 'INSERT INTO TRANSACTION_LOG (SEQ_ID,MSG_ID,SERVICE_NAME,OPERATION_NAME,TRANSACTION_STATUS,CREATED_ON,CREATED_BY) VALUES(?,?,?,?,?,?,?)' TO Database.DBDSN VALUES(SEQ_ID,msgid,SERVICE_NAME,OPERATION_NAME,TRANSACTION_STATUS,CURRENT_TIMESTAMP,'ACE-USER');
		COMMIT;
		CALL PayloadLogging(msgid,payload,'CHANNEL_REQ',MessageFlowLabel,OutRef);
		CALL writeToLogFile(MessageFlowLabel,'UnBlocking_Log','INFO','..........Request Received  from END USER.............') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,'UnBlocking_Log','INFO','CHANNEL_REQ data is: '||payload) INTO rc;
	
		DECLARE domainDataRef1 REFERENCE TO OutputRoot.SOAP.Body;
		DECLARE domainName1 CHARACTER 'SOAP';
		DECLARE payload1 CHARACTER getPayLoad(domainName1,domainDataRef1,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef1 REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(msgid,payload1,'FLEXCUBE_REQ',MessageFlowLabel,OutRef1);
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = CBS_URL;
		CALL writeToLogFile(MessageFlowLabel,'UnBlocking_Log','INFO','FLEXCUBE_REQ data is: '||payload1) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,'UnBlocking_Log','INFO','..........Request Sent To Backend  Flow...........') INTO rc;
	END;
END MODULE;
---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE COMPUTE MODULE ResponseToChannel

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN

		DECLARE id1 CHARACTER Environment.id ;
		SET Environment.id1 = id1;
		SET Environment.ccidRef1 = InputRoot.Properties.CodedCharSetId;
		SET Environment.encodeRef1 = InputRoot.Properties.Encoding;
		SET Environment.domainDataRef1 = InputRoot.SOAP.Body;
		SET Environment.domainName1 = FIELDNAME(InputBody);

		DECLARE TRANSACTION_STATUS3 CHARACTER 'Response Received from BackEnd flow';
		DECLARE CREATED_ON3 TIMESTAMP CURRENT_TIMESTAMP;
		-- DECLARE qry11 CHARACTER 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE REQ_ID LIKE ''%'||refid||'%''';
		-- SET Environment.val1[] = PASSTHRU(qry11 TO Database.DSN VALUES(TRANSACTION_STATUS3,CREATED_ON3));
		PASSTHRU 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE MSG_ID=?' TO Database.DBDSN VALUES(TRANSACTION_STATUS3,CREATED_ON3,Environment.id);
        COMMIT;
        
		DECLARE ccidRef INTEGER Environment.ccidRef1;
		DECLARE encodeRef INTEGER Environment.encodeRef1;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP.Body;
		DECLARE domainName CHARACTER Environment.domainName1;
		DECLARE payload CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;

		CALL PayloadLogging(id1,payload,'FLEXCUBE_RESP',MessageFlowLabel,OutRef);
		SET OutputRoot.SOAP.Body = InputRoot.SOAP.Body;

		DECLARE TRANSACTION_STATUS4 CHARACTER 'Response Sent to END USER';
		DECLARE CREATED_ON4 TIMESTAMP CURRENT_TIMESTAMP;
		-- SET Environment.val2[] = PASSTHRU(qry11 TO Database.DBDSN VALUES(TRANSACTION_STATUS4,CREATED_ON4));
		PASSTHRU 'UPDATE TRANSACTION_LOG SET TRANSACTION_STATUS=?,CREATED_ON=? WHERE MSG_ID=?' TO Database.DBDSN VALUES(TRANSACTION_STATUS4,CREATED_ON4,Environment.id);

		DECLARE domainDataRef1 REFERENCE TO OutputRoot.SOAP.Body;
		DECLARE domainName1 CHARACTER 'SOAP';
		DECLARE payload1 CHARACTER getPayLoad(domainName1,domainDataRef1,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef1 REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(Environment.id,payload1,'CHANNEL_RESP',MessageFlowLabel,OutRef1);
		SET OutputRoot.HTTPResponseHeader=InputRoot.HTTPResponseHeader;
		SET OutputRoot.SOAP.Body.ns:CLOSEAMTBLK_FSFSResponse = InputRoot.SOAP.Body.CLOSEAMTBLK_FSFSResponse;
		CALL writeToLogFile(MessageFlowLabel,'UnBlocking_Log','INFO',' ------------Response Received from CBS flow---------------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,'UnBlocking_Log','INFO','FLEXCUBE_RESP data is: '||payload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,'UnBlocking_Log','INFO','CHANNEL_RESP data is: '||payload1) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,'UnBlocking_Log','INFO',' ------------Response Sent to END USER------------') INTO rc;

	END;
END MODULE;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



CREATE COMPUTE MODULE BuildExceptionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildExceptionResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE BuildExceptionResponse() BEGIN
		CALL writeToLogFile(MessageFlowLabel,'UnBlocking_Log','DEBUG','..............Error Logging Started...........') INTO rc;
		DECLARE inRef REFERENCE TO InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment;
		DECLARE outRefer,outRef REFERENCE TO OutputRoot;
		DECLARE encodeID INTEGER InputRoot.Properties.Encoding;
		DECLARE ccsID INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputBody;
		--DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		--DECLARE excpPayload CHARACTER getPayLoad(domainName,domainDataRef,encodeID,ccsID);
		--CREATE LASTCHILD OF Environment AS envRef DOMAIN 'XMLNSC';
		---CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Envelope';
		--CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Body';
		--CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'esb' NAME 'FundsTransfer';
		--CALL BuildExceptionDetails(excpRef,envRef,'FundsTransfer');
		--SET Environment.Variables.UserDefinedException = Environment.XMLNSC;
		--MOVE domainDataRef TO Environment.XMLNSC;
		--SET domainName = FIELDNAME(domainDataRef);
		DECLARE resPayload CHAR getPayLoad(domainName,domainDataRef,encodeID,ccsID);
		CALL writeToLogFile(MessageFlowLabel,'INFO','DEBUG','Application Built Exception:'||resPayload) INTO rc;
		------------Error Logging in DB----------
		--CALL ConstructErrorDBLog(CURRENT_TIMESTAMP,CREATED_BY,envRef.ErrorType,MessageFlowLabel,ApplicationLabel,ExecutionGroupLabel,
		---excpPayload,Environment.REQUEST_PAYLOAD,excpRef.excpNumber,envRef.ErrorCode,outRef);
		-------------------------------------------
		SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
		SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = Environment.Variables.RequestIdentifier;
		CALL writeToLogFile(MessageFlowLabel,'UnBlocking_Log','DEBUG','..............End of Error Logging ...........') INTO rc;

	END;
END MODULE;