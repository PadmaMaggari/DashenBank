
BROKER SCHEMA com.dashenbank.Fundstransfer

PATH com.dashenbank.genericfunctions;
DECLARE ns NAMESPACE 'http://localhost:7800/RTSERVICE/';
--DECLARE soapenv NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
--DECLARE esb NAMESPACE 'http://www.dashenbank.org/ESB_RTService/';

DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER;
DECLARE LOG4J_ERROR_MSG EXTERNAL CHARACTER;
DECLARE BACKEND_URL EXTERNAL CHARACTER;
DECLARE DSN_NAME EXTERNAL CHARACTER;
DECLARE LOGGER_NAME EXTERNAL CHARACTER;
DECLARE LOG_TYPE EXTERNAL CHARACTER;
------------- Global Variable-----------
DECLARE rc BOOLEAN TRUE;

CREATE COMPUTE MODULE RequestToBackend

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = TRUE) THEN
			CALL CopyEntireMessage();
		ELSE
			SET OutputRoot.SOAP.Body.Log.Message = LOG4J_ERROR_MSG;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE msg_Id CHARACTER InputRoot.SOAP.Body.ns:RTSERVICE.RT_HEADER.MSGID;
		SET Environment.id = msg_Id;
		
		SET Environment.variables.ccidRef = InputRoot.Properties.CodedCharSetId;
		SET Environment.variables.encodeRef = InputRoot.Properties.Encoding;
		SET Environment.variables.domainDataRef = InputRoot.SOAP;
		SET Environment.variables.domainName = FIELDNAME(InputBody);

		DECLARE ccidRef INTEGER Environment.ccidRef;
		DECLARE encodeRef INTEGER Environment.encodeRef;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP.Body;
		DECLARE domainName CHARACTER Environment.domainName;
		
		DECLARE inRefPayload CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(msg_Id,inRefPayload,'CHANNEL_REQ',MessageFlowLabel,OutRef);

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ CHANNEL_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'CHANNEL_REQ data is: '||inRefPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -----------------------------------------------------------------------') INTO rc;
		-------------- FIELD TO FIELD MAPPING -------------
		DECLARE inputbodyRef REFERENCE TO InputRoot.SOAP.Body.ns:RTSERVICE;

		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outputbodyRef REFERENCE TO OutputRoot.SOAP;

		SET outputbodyRef.Body.ns:RTSERVICE.RT_HEADER.SOURCE = inputbodyRef.RT_HEADER.SOURCE;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_HEADER.UBSCOMP = inputbodyRef.RT_HEADER.UBSCOMP;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_HEADER.MSGID = inputbodyRef.RT_HEADER.MSGID;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_HEADER.CORRELID = inputbodyRef.RT_HEADER.CORRELID;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_HEADER.USERID = inputbodyRef.RT_HEADER.USERID;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_HEADER.BRANCH = inputbodyRef.RT_HEADER.BRANCH;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_HEADER.MODULEID = inputbodyRef.RT_HEADER.MODULEID;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_HEADER.SERVICE = inputbodyRef.RT_HEADER.SERVICE;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_HEADER.OPERATION = inputbodyRef.RT_HEADER.OPERATION;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_HEADER.SOURCE_USERID = inputbodyRef.RT_HEADER.SOURCE_USERID;

		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".XREF = inputbodyRef.RT_BODY."Transaction-Details".XREF;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".PRD = inputbodyRef.RT_BODY."Transaction-Details".PRD;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".BRN = inputbodyRef.RT_BODY."Transaction-Details".BRN;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".MODULE = inputbodyRef.RT_BODY."Transaction-Details".MODULE;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".TXNBRN = inputbodyRef.RT_BODY."Transaction-Details".TXNBRN;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".TXNACC = inputbodyRef.RT_BODY."Transaction-Details".TXNACC;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".TXNCCY = inputbodyRef.RT_BODY."Transaction-Details".TXNCCY;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".TXNAMT = inputbodyRef.RT_BODY."Transaction-Details".TXNAMT;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".TXNTRN = inputbodyRef.RT_BODY."Transaction-Details".TXNTRN;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".OFFSETBRN = inputbodyRef.RT_BODY."Transaction-Details".OFFSETBRN;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".OFFSETACC = inputbodyRef.RT_BODY."Transaction-Details".OFFSETACC;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".OFFSETCCY = inputbodyRef.RT_BODY."Transaction-Details".OFFSETCCY;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".OFFSETAMT = inputbodyRef.RT_BODY."Transaction-Details".OFFSETAMT;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".OFFSETTRN = inputbodyRef.RT_BODY."Transaction-Details".OFFSETTRN;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".TXNDATE = inputbodyRef.RT_BODY."Transaction-Details".TXNDATE;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".VALDATE = inputbodyRef.RT_BODY."Transaction-Details".VALDATE;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".NARRATIVE = inputbodyRef.RT_BODY."Transaction-Details".NARRATIVE;
		SET outputbodyRef.Body.ns:RTSERVICE.RT_BODY."Transaction-Details".AUTHSTAT = inputbodyRef.RT_BODY."Transaction-Details".AUTHSTAT;

        SET Environment.inSOAP = OutputRoot.SOAP;
 
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef1 REFERENCE TO OutputRoot.XMLNSC;
		DECLARE outRefPayload CHARACTER getPayLoad(domainName,OutputRoot.SOAP,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		CALL PayloadLogging(reqIdentifier,outRefPayload,'FLEXCUBE_REQ',ApplicationLabel,OutRef1);
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.HTTPInputHeader = InputRoot.HTTPInputHeader;
		SET OutputRoot.SOAP = Environment.inSOAP;
		

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------ FLEXCUBE_REQ ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'FLEXCUBE_REQ data is: '||outRefPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'-------------------------------------------------------------------------') INTO rc;

		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = BACKEND_URL;

	END;
END MODULE;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE COMPUTE MODULE ResponseToChannel

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN

		SET Environment.ccidRef1 = InputRoot.Properties.CodedCharSetId;
		SET Environment.encodeRef1 = InputRoot.Properties.Encoding;
		SET Environment.domainDataRef1 = InputRoot.SOAP.Body;
		SET Environment.domainName1 = FIELDNAME(InputBody);

		DECLARE ccidRef INTEGER Environment.ccidRef1;
		DECLARE encodeRef INTEGER Environment.encodeRef1;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP.Body;
		DECLARE domainName CHARACTER Environment.domainName1;
		DECLARE inRefPayload CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);

		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC;
		CALL PayloadLogging(Environment.id,inRefPayload,'FLEXCUBE_RESP',MessageFlowLabel,OutRef);

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ------- FLEXCUBE_RESP -------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'FLEXCUBE_RESP data is: '||inRefPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' ----------------------------------------------------------------------') INTO rc;

		SET OutputRoot.SOAP = InputRoot.SOAP;
		
		
			SET Environment.inSOAP = OutputRoot.SOAP;

		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE OutRef1 REFERENCE TO OutputRoot.XMLNSC;
		DECLARE outRefPayload CHARACTER getPayLoad(domainName,OutputRoot.SOAP,encodeRef,ccidRef);
		SET OutputRoot.SOAP = NULL;
		CALL PayloadLogging(Environment.ID,outRefPayload,'FLEXCUBE_REQ',ApplicationLabel,OutRef1);
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.HTTPResponseHeader= InputRoot.HTTPResponseHeader;
		SET OutputRoot.SOAP = Environment.inSOAP;
		

		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,' -------- CHANNEL_RESP -------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'CHANNEL_RESP data is: '||outRefPayload) INTO rc;
		CALL writeToLogFile(MessageFlowLabel,LOGGER_NAME,LOG_TYPE,'**********************************************************************') INTO rc;

	END;
END MODULE;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



CREATE COMPUTE MODULE BuildExceptionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildExceptionResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE BuildExceptionResponse() BEGIN
		CALL writeToLogFile(MessageFlowLabel,'FundstransferLogger','DEBUG','..............Error Logging Started...........') INTO rc;
		DECLARE inRef REFERENCE TO InputRoot.SOAP;
		DECLARE envRef REFERENCE TO Environment;
		DECLARE outRefer,outRef REFERENCE TO OutputRoot;
		DECLARE encodeID INTEGER InputRoot.Properties.Encoding;
		DECLARE ccsID INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputBody;
		--DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		--DECLARE excpPayload CHARACTER getPayLoad(domainName,domainDataRef,encodeID,ccsID);
		--CREATE LASTCHILD OF Environment AS envRef DOMAIN 'XMLNSC';
		---CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Envelope';
		--CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'soapenv' NAME 'Body';
		--CREATE LASTCHILD OF envRef AS envRef NAMESPACE 'esb' NAME 'FundsTransfer';
		--CALL BuildExceptionDetails(excpRef,envRef,'FundsTransfer');
		--SET Environment.Variables.UserDefinedException = Environment.XMLNSC;
		--MOVE domainDataRef TO Environment.XMLNSC;
		--SET domainName = FIELDNAME(domainDataRef);
		DECLARE resPayload CHAR getPayLoad(domainName,domainDataRef,encodeID,ccsID);
		CALL writeToLogFile(MessageFlowLabel,'FundstransferLogger','DEBUG','Application Built Exception:'||resPayload) INTO rc;
		------------Error Logging in DB----------
		--CALL ConstructErrorDBLog(CURRENT_TIMESTAMP,CREATED_BY,envRef.ErrorType,MessageFlowLabel,ApplicationLabel,ExecutionGroupLabel,
		---excpPayload,Environment.REQUEST_PAYLOAD,excpRef.excpNumber,envRef.ErrorCode,outRef);
		-------------------------------------------
		SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
		SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = Environment.Variables.RequestIdentifier;
		CALL writeToLogFile(MessageFlowLabel,'FundstransferLogger','DEBUG','..............End of Error Logging ...........') INTO rc;
	END;
END MODULE;